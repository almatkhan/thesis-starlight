from "ecc/babyjubjubParams" import main as curveParams
from "ecc/edwardsScalarMult" import main as scalarMult
from "ecc/edwardsCompress" import main as edwardsCompress
from "utils/pack/bool/pack256.zok" import main as bool_256_to_field
from "utils/pack/bool/nonStrictUnpack256.zok" import main as field_to_bool_256
from "hashes/poseidon/poseidon.zok" import main as poseidon
from "./common/merkle-tree/sparse-merkle-tree/checkproof.zok" import main as checkproof
from "./common/merkle-tree/sparse-merkle-tree/checkproof.zok" import checkUpdatedPath as checkUpdatedPath
from "./common/merkle-tree/mimc/altbn254/verify-membership/height32.zok" import main as checkRoot

def main(\
	private field latestShortfallSequenceNumber_oldCommitment_owner_secretKey,\
	public field nullifierRoot,\
	public field newNullifierRoot,\
	public field latestShortfallSequenceNumber_oldCommitment_nullifier,\
	private field[32] latestShortfallSequenceNumber_nullifier_nonmembershipWitness_siblingPath,\
	private field[32] latestShortfallSequenceNumber_nullifier_nonmembershipWitness_newsiblingPath,\
	private  field latestShortfallSequenceNumber_oldCommitment_value,\
	private field latestShortfallSequenceNumber_oldCommitment_salt,\
	private bool latestShortfallSequenceNumber_oldCommitment_isDummy,\
	public field commitmentRoot,\
	private field latestShortfallSequenceNumber_oldCommitment_membershipWitness_index,\
	private field[32] latestShortfallSequenceNumber_oldCommitment_membershipWitness_siblingPath,\
	private field latestShortfallSequenceNumber_newCommitment_owner_publicKey,\
	private field latestShortfallSequenceNumber_newCommitment_salt,\
	public field latestShortfallSequenceNumber_newCommitment_commitment\
) -> (bool):

        
        // We need to hard-code each stateVarId into the circuit:
        field latestShortfallSequenceNumber_stateVarId_field = 22


        field latestShortfallSequenceNumber = latestShortfallSequenceNumber_oldCommitment_value

latestShortfallSequenceNumber = 0


        // latestShortfallSequenceNumber_oldCommitment - PoKoSK:
        // The correctness of this secret key will be constrained within the oldCommitment existence check.

        field[2] latestShortfallSequenceNumber_oldCommitment_owner_publicKey_point = scalarMult(field_to_bool_256(latestShortfallSequenceNumber_oldCommitment_owner_secretKey), [curveParams().Gu, curveParams().Gv], curveParams())

        bool latestShortfallSequenceNumber_oldCommitment_owner_publicKey_sign = edwardsCompress(latestShortfallSequenceNumber_oldCommitment_owner_publicKey_point)[0]

        bool[254] latestShortfallSequenceNumber_oldCommitment_yBits = field_to_bool_256(latestShortfallSequenceNumber_oldCommitment_owner_publicKey_point[1])[2..256]
        latestShortfallSequenceNumber_oldCommitment_yBits[0] = latestShortfallSequenceNumber_oldCommitment_owner_publicKey_sign

        field latestShortfallSequenceNumber_oldCommitment_owner_publicKey = bool_256_to_field([false, false, ...latestShortfallSequenceNumber_oldCommitment_yBits])


        // Nullify latestShortfallSequenceNumber:

        field latestShortfallSequenceNumber_oldCommitment_nullifier_check_field = poseidon([\
          latestShortfallSequenceNumber_stateVarId_field,\
          latestShortfallSequenceNumber_oldCommitment_owner_secretKey,\
          latestShortfallSequenceNumber_oldCommitment_salt\
        ])

        assert(\
        field_to_bool_256(latestShortfallSequenceNumber_oldCommitment_nullifier)[8..256] == field_to_bool_256(latestShortfallSequenceNumber_oldCommitment_nullifier_check_field)[8..256]\
        )
        // latestShortfallSequenceNumber_oldCommitment_nullifier : non-existence check
        
        assert(\
          nullifierRoot == checkproof(\
            latestShortfallSequenceNumber_nullifier_nonmembershipWitness_siblingPath,\
            latestShortfallSequenceNumber_oldCommitment_nullifier\
           )       )

       assert(\
        newNullifierRoot == checkUpdatedPath(\
          latestShortfallSequenceNumber_nullifier_nonmembershipWitness_newsiblingPath,\
          latestShortfallSequenceNumber_oldCommitment_nullifier\
        )        )

        



        // prepare secret state 'latestShortfallSequenceNumber' for commitment

          field latestShortfallSequenceNumber_oldCommitment_value_field = latestShortfallSequenceNumber_oldCommitment_value
          
        // latestShortfallSequenceNumber_oldCommitment_commitment: preimage check


        field latestShortfallSequenceNumber_oldCommitment_commitment_field = poseidon([\
          latestShortfallSequenceNumber_stateVarId_field,\
          latestShortfallSequenceNumber_oldCommitment_value_field,\
          latestShortfallSequenceNumber_oldCommitment_owner_publicKey,\
          latestShortfallSequenceNumber_oldCommitment_salt        ])


        // latestShortfallSequenceNumber_oldCommitment_commitment: existence check


        field latestShortfallSequenceNumber_commitmentRoot_check = checkRoot(\
          latestShortfallSequenceNumber_oldCommitment_membershipWitness_siblingPath,\
          latestShortfallSequenceNumber_oldCommitment_commitment_field,\
          latestShortfallSequenceNumber_oldCommitment_membershipWitness_index\
        )


        // Note: Don't bother actually asserting existence, if the oldCommitment is a dummy:
        latestShortfallSequenceNumber_commitmentRoot_check = if latestShortfallSequenceNumber_oldCommitment_isDummy == true then commitmentRoot else latestShortfallSequenceNumber_commitmentRoot_check fi


        assert(\
          field_to_bool_256(commitmentRoot)[8..256] == field_to_bool_256(latestShortfallSequenceNumber_commitmentRoot_check)[8..256]\
        )


        // prepare secret state 'latestShortfallSequenceNumber' for commitment

        field latestShortfallSequenceNumber_newCommitment_value_field = latestShortfallSequenceNumber

        // latestShortfallSequenceNumber_newCommitment_commitment - preimage check

        field latestShortfallSequenceNumber_newCommitment_commitment_check_field = poseidon([\
          latestShortfallSequenceNumber_stateVarId_field,\
          latestShortfallSequenceNumber_newCommitment_value_field,\
          latestShortfallSequenceNumber_newCommitment_owner_publicKey,\
          latestShortfallSequenceNumber_newCommitment_salt\
        ])

        assert(\
          field_to_bool_256(latestShortfallSequenceNumber_newCommitment_commitment)[8..256] == field_to_bool_256(latestShortfallSequenceNumber_newCommitment_commitment_check_field)[8..256]\
        )

         return true