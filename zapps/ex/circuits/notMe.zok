from "ecc/babyjubjubParams" import main as curveParams
from "ecc/edwardsScalarMult" import main as scalarMult
from "ecc/edwardsCompress" import main as edwardsCompress
from "utils/pack/bool/pack256.zok" import main as bool_256_to_field
from "utils/pack/bool/nonStrictUnpack256.zok" import main as field_to_bool_256
from "./common/hashes/poseidon/poseidon.zok" import main as poseidon
from "./common/merkle-tree/mimc/altbn254/verify-membership/height32.zok" import main as checkRoot
from "./common/hashes/mimc/altbn254/mimc2.zok" import main as mimc2

struct Shortfall {
        field billNumber
field volume
field price
      }

def main(\
	private field billNumber,\
	private field sequenceNumber,\
	private field totalGeneratedVolume,\
	private field expectedVolume,\
	private field averagePrice,\
	private field marginalLossFactor,\
	private field floatingAmount,\
	private field positiveAdjustment,\
	private field negativeAdjustment,\
	private field[5] outstandingGeneratorAmount,\
	private field[5] outstandingOfftakerAmount,\
	private field[5] generatorDelayDays,\
	private field[5] offtakerDelayDays,\
	private field referenceDate,\
	private field strikePrice_oldCommitment_owner_secretKey,\
	public field strikePrice_oldCommitment_nullifier,\
	private  field strikePrice_oldCommitment_value,\
	private field strikePrice_oldCommitment_salt,\
	public field commitmentRoot,\
	private field strikePrice_oldCommitment_membershipWitness_index,\
	private field[32] strikePrice_oldCommitment_membershipWitness_siblingPath,\
	private field bundlePrice_oldCommitment_owner_secretKey,\
	public field bundlePrice_oldCommitment_nullifier,\
	private  field bundlePrice_oldCommitment_value,\
	private field bundlePrice_oldCommitment_salt,\
	private field bundlePrice_oldCommitment_membershipWitness_index,\
	private field[32] bundlePrice_oldCommitment_membershipWitness_siblingPath,\
	private field volumeShare_oldCommitment_owner_secretKey,\
  public field volumeShare_oldCommitment_nullifier,\
	private  field volumeShare_oldCommitment_value,\
	private field volumeShare_oldCommitment_salt,\
	private field volumeShare_oldCommitment_membershipWitness_index,\
	private field[32] volumeShare_oldCommitment_membershipWitness_siblingPath,\
	private field dailyInterestRate_oldCommitment_owner_secretKey,\
  public field dailyInterestRate_oldCommitment_nullifier,\
	private  field dailyInterestRate_oldCommitment_value,\
	private field dailyInterestRate_oldCommitment_salt,\
	private field dailyInterestRate_oldCommitment_membershipWitness_index,\
	private field[32] dailyInterestRate_oldCommitment_membershipWitness_siblingPath,\
	private field expiryDateOfContract_oldCommitment_owner_secretKey,\
  public field expiryDateOfContract_oldCommitment_nullifier,\
	private  field expiryDateOfContract_oldCommitment_value,\
	private field expiryDateOfContract_oldCommitment_salt,\
	private field expiryDateOfContract_oldCommitment_membershipWitness_index,\
	private field[32] expiryDateOfContract_oldCommitment_membershipWitness_siblingPath,\
	private field shortfalls_index_oldCommitment_owner_secretKey,\
	public field shortfalls_index_oldCommitment_nullifier,\
	private  Shortfall shortfalls_index_oldCommitment_value,\
	private field shortfalls_index_oldCommitment_salt,\
	private bool shortfalls_index_oldCommitment_isDummy,\
	private field shortfalls_index_oldCommitment_membershipWitness_index,\
	private field[32] shortfalls_index_oldCommitment_membershipWitness_siblingPath,\
	private field shortfalls_index_newCommitment_owner_publicKey,\
	private field shortfalls_index_newCommitment_salt,\
	public field shortfalls_index_newCommitment_commitment,\
	private field latestShortfallSequenceNumber_oldCommitment_owner_secretKey,\
	public field latestShortfallSequenceNumber_oldCommitment_nullifier,\
	private  field latestShortfallSequenceNumber_oldCommitment_value,\
	private field latestShortfallSequenceNumber_oldCommitment_salt,\
	private bool latestShortfallSequenceNumber_oldCommitment_isDummy,\
	private field latestShortfallSequenceNumber_oldCommitment_membershipWitness_index,\
	private field[32] latestShortfallSequenceNumber_oldCommitment_membershipWitness_siblingPath,\
	private field latestShortfallSequenceNumber_newCommitment_owner_publicKey,\
	private field latestShortfallSequenceNumber_newCommitment_salt,\
	public field latestShortfallSequenceNumber_newCommitment_commitment,\
	private field surplus_tempSurplusIndex_oldCommitment_owner_secretKey,\
	public field surplus_tempSurplusIndex_oldCommitment_nullifier,\
	private  Shortfall surplus_tempSurplusIndex_oldCommitment_value,\
	private field surplus_tempSurplusIndex_oldCommitment_salt,\
	private bool surplus_tempSurplusIndex_oldCommitment_isDummy,\
	private field surplus_tempSurplusIndex_oldCommitment_membershipWitness_index,\
	private field[32] surplus_tempSurplusIndex_oldCommitment_membershipWitness_siblingPath,\
	private field surplus_tempSurplusIndex_newCommitment_owner_publicKey,\
	private field surplus_tempSurplusIndex_newCommitment_salt,\
	public field surplus_tempSurplusIndex_newCommitment_commitment,\
	private field latestSurplusSequenceNumber_oldCommitment_owner_secretKey,\
	public field latestSurplusSequenceNumber_oldCommitment_nullifier,\
	private  field latestSurplusSequenceNumber_oldCommitment_value,\
	private field latestSurplusSequenceNumber_oldCommitment_salt,\
	private bool latestSurplusSequenceNumber_oldCommitment_isDummy,\
	private field latestSurplusSequenceNumber_oldCommitment_membershipWitness_index,\
	private field[32] latestSurplusSequenceNumber_oldCommitment_membershipWitness_siblingPath,\
	private field latestSurplusSequenceNumber_newCommitment_owner_publicKey,\
	private field latestSurplusSequenceNumber_newCommitment_salt,\
	public field latestSurplusSequenceNumber_newCommitment_commitment,\
	private field sequenceNumberInterval_oldCommitment_owner_secretKey,\
	public field sequenceNumberInterval_oldCommitment_nullifier,\
	private  field sequenceNumberInterval_oldCommitment_value,\
	private field sequenceNumberInterval_oldCommitment_salt,\
	private field sequenceNumberInterval_oldCommitment_membershipWitness_index,\
	private field[32] sequenceNumberInterval_oldCommitment_membershipWitness_siblingPath,\
	private field generatorCharges_billNumber_oldCommitment_owner_secretKey,\
	public field generatorCharges_billNumber_oldCommitment_nullifier,\
	private  field generatorCharges_billNumber_oldCommitment_value,\
	private field generatorCharges_billNumber_oldCommitment_salt,\
	private bool generatorCharges_billNumber_oldCommitment_isDummy,\
	private field generatorCharges_billNumber_oldCommitment_membershipWitness_index,\
	private field[32] generatorCharges_billNumber_oldCommitment_membershipWitness_siblingPath,\
	private field generatorCharges_billNumber_newCommitment_owner_publicKey,\
	private field generatorCharges_billNumber_newCommitment_salt,\
	public field generatorCharges_billNumber_newCommitment_commitment,\
	private field offtakerCharges_billNumber_oldCommitment_owner_secretKey,\
	public field offtakerCharges_billNumber_oldCommitment_nullifier,\
	private  field offtakerCharges_billNumber_oldCommitment_value,\
	private field offtakerCharges_billNumber_oldCommitment_salt,\
	private bool offtakerCharges_billNumber_oldCommitment_isDummy,\
	private field offtakerCharges_billNumber_oldCommitment_membershipWitness_index,\
	private field[32] offtakerCharges_billNumber_oldCommitment_membershipWitness_siblingPath,\
	private field offtakerCharges_billNumber_newCommitment_owner_publicKey,\
	private field offtakerCharges_billNumber_newCommitment_salt,\
	public field offtakerCharges_billNumber_newCommitment_commitment,\
	private field generatorInterest_billNumber_oldCommitment_owner_secretKey,\
	public field generatorInterest_billNumber_oldCommitment_nullifier,\
	private  field generatorInterest_billNumber_oldCommitment_value,\
	private field generatorInterest_billNumber_oldCommitment_salt,\
	private bool generatorInterest_billNumber_oldCommitment_isDummy,\
	private field generatorInterest_billNumber_oldCommitment_membershipWitness_index,\
	private field[32] generatorInterest_billNumber_oldCommitment_membershipWitness_siblingPath,\
	private field generatorInterest_billNumber_newCommitment_owner_publicKey,\
	private field generatorInterest_billNumber_newCommitment_salt,\
	public field generatorInterest_billNumber_newCommitment_commitment,\
	private field offtakerInterest_billNumber_oldCommitment_owner_secretKey,\
	public field offtakerInterest_billNumber_oldCommitment_nullifier,\
	private  field offtakerInterest_billNumber_oldCommitment_value,\
	private field offtakerInterest_billNumber_oldCommitment_salt,\
	private bool offtakerInterest_billNumber_oldCommitment_isDummy,\
	private field offtakerInterest_billNumber_oldCommitment_membershipWitness_index,\
	private field[32] offtakerInterest_billNumber_oldCommitment_membershipWitness_siblingPath,\
	private field offtakerInterest_billNumber_newCommitment_owner_publicKey,\
	private field offtakerInterest_billNumber_newCommitment_salt,\
	public field offtakerInterest_billNumber_newCommitment_commitment,\
	private field negativePriceCharges_billNumber_oldCommitment_owner_secretKey,\
	public field negativePriceCharges_billNumber_oldCommitment_nullifier,\
	private  field negativePriceCharges_billNumber_oldCommitment_value,\
	private field negativePriceCharges_billNumber_oldCommitment_salt,\
	private bool negativePriceCharges_billNumber_oldCommitment_isDummy,\
	private field negativePriceCharges_billNumber_oldCommitment_membershipWitness_index,\
	private field[32] negativePriceCharges_billNumber_oldCommitment_membershipWitness_siblingPath,\
	private field negativePriceCharges_billNumber_newCommitment_owner_publicKey,\
	private field negativePriceCharges_billNumber_newCommitment_salt,\
	public field negativePriceCharges_billNumber_newCommitment_commitment,\
	private field numberOfConsecutivePeriodsForShortfall_oldCommitment_owner_secretKey,\
	public field numberOfConsecutivePeriodsForShortfall_oldCommitment_nullifier,\
	private  field numberOfConsecutivePeriodsForShortfall_oldCommitment_value,\
	private field numberOfConsecutivePeriodsForShortfall_oldCommitment_salt,\
	private field numberOfConsecutivePeriodsForShortfall_oldCommitment_membershipWitness_index,\
	private field[32] numberOfConsecutivePeriodsForShortfall_oldCommitment_membershipWitness_siblingPath,\
	private field shortfallThreshold_oldCommitment_owner_secretKey,\
	public field shortfallThreshold_oldCommitment_nullifier,\
	private  field shortfallThreshold_oldCommitment_value,\
	private field shortfallThreshold_oldCommitment_salt,\
	private field shortfallThreshold_oldCommitment_membershipWitness_index,\
	private field[32] shortfallThreshold_oldCommitment_membershipWitness_siblingPath,\
	private field shortfallChargeSum_oldCommitment_owner_secretKey,\
	public field shortfallChargeSum_oldCommitment_nullifier,\
	private  field shortfallChargeSum_oldCommitment_value,\
	private field shortfallChargeSum_oldCommitment_salt,\
	private bool shortfallChargeSum_oldCommitment_isDummy,\
	private field shortfallChargeSum_oldCommitment_membershipWitness_index,\
	private field[32] shortfallChargeSum_oldCommitment_membershipWitness_siblingPath,\
	private field shortfallChargeSum_newCommitment_owner_publicKey,\
	private field shortfallChargeSum_newCommitment_salt,\
	public field shortfallChargeSum_newCommitment_commitment,\
	private field shortfallIndex_oldCommitment_owner_secretKey,\
	public field shortfallIndex_oldCommitment_nullifier,\
	private  field shortfallIndex_oldCommitment_value,\
	private field shortfallIndex_oldCommitment_salt,\
	private bool shortfallIndex_oldCommitment_isDummy,\
	private field shortfallIndex_oldCommitment_membershipWitness_index,\
	private field[32] shortfallIndex_oldCommitment_membershipWitness_siblingPath,\
	private field shortfallIndex_newCommitment_owner_publicKey,\
	private field shortfallIndex_newCommitment_salt,\
	public field shortfallIndex_newCommitment_commitment,\
	private field shortfallCharges_billNumber_oldCommitment_owner_secretKey,\
	public field shortfallCharges_billNumber_oldCommitment_nullifier,\
	private  field shortfallCharges_billNumber_oldCommitment_value,\
	private field shortfallCharges_billNumber_oldCommitment_salt,\
	private bool shortfallCharges_billNumber_oldCommitment_isDummy,\
	private field shortfallCharges_billNumber_oldCommitment_membershipWitness_index,\
	private field[32] shortfallCharges_billNumber_oldCommitment_membershipWitness_siblingPath,\
	private field shortfallCharges_billNumber_newCommitment_owner_publicKey,\
	private field shortfallCharges_billNumber_newCommitment_salt,\
	public field shortfallCharges_billNumber_newCommitment_commitment,\
	private field numberOfConsecutivePeriodsForSurplus_oldCommitment_owner_secretKey,\
	public field numberOfConsecutivePeriodsForSurplus_oldCommitment_nullifier,\
	private  field numberOfConsecutivePeriodsForSurplus_oldCommitment_value,\
	private field numberOfConsecutivePeriodsForSurplus_oldCommitment_salt,\
	private field numberOfConsecutivePeriodsForSurplus_oldCommitment_membershipWitness_index,\
	private field[32] numberOfConsecutivePeriodsForSurplus_oldCommitment_membershipWitness_siblingPath,\
	private field surplusThreshold_oldCommitment_owner_secretKey,\
	public field surplusThreshold_oldCommitment_nullifier,\
	private  field surplusThreshold_oldCommitment_value,\
	private field surplusThreshold_oldCommitment_salt,\
	private field surplusThreshold_oldCommitment_membershipWitness_index,\
	private field[32] surplusThreshold_oldCommitment_membershipWitness_siblingPath,\
	private field surplusChargeSum_oldCommitment_owner_secretKey,\
	public field surplusChargeSum_oldCommitment_nullifier,\
	private  field surplusChargeSum_oldCommitment_value,\
	private field surplusChargeSum_oldCommitment_salt,\
	private bool surplusChargeSum_oldCommitment_isDummy,\
	private field surplusChargeSum_oldCommitment_membershipWitness_index,\
	private field[32] surplusChargeSum_oldCommitment_membershipWitness_siblingPath,\
	private field surplusChargeSum_newCommitment_owner_publicKey,\
	private field surplusChargeSum_newCommitment_salt,\
	public field surplusChargeSum_newCommitment_commitment,\
	private field surplusIndex_oldCommitment_owner_secretKey,\
	public field surplusIndex_oldCommitment_nullifier,\
	private  field surplusIndex_oldCommitment_value,\
	private field surplusIndex_oldCommitment_salt,\
	private bool surplusIndex_oldCommitment_isDummy,\
	private field surplusIndex_oldCommitment_membershipWitness_index,\
	private field[32] surplusIndex_oldCommitment_membershipWitness_siblingPath,\
	private field surplusIndex_newCommitment_owner_publicKey,\
	private field surplusIndex_newCommitment_salt,\
	public field surplusIndex_newCommitment_commitment,\
	private field surplusCharges_billNumber_oldCommitment_owner_secretKey,\
	public field surplusCharges_billNumber_oldCommitment_nullifier,\
	private  field surplusCharges_billNumber_oldCommitment_value,\
	private field surplusCharges_billNumber_oldCommitment_salt,\
	private bool surplusCharges_billNumber_oldCommitment_isDummy,\
	private field surplusCharges_billNumber_oldCommitment_membershipWitness_index,\
	private field[32] surplusCharges_billNumber_oldCommitment_membershipWitness_siblingPath,\
	private field surplusCharges_billNumber_newCommitment_owner_publicKey,\
	private field surplusCharges_billNumber_newCommitment_salt,\
	public field surplusCharges_billNumber_newCommitment_commitment\
) -> (field,field,field,field,field,field,field):

        
        // We need to hard-code each stateVarId into the circuit:
        field strikePrice_stateVarId_field = 5


        field strikePrice = strikePrice_oldCommitment_value


        // We need to hard-code each stateVarId into the circuit:
        field bundlePrice_stateVarId_field = 7


        field bundlePrice = bundlePrice_oldCommitment_value


        // We need to hard-code each stateVarId into the circuit:
        field volumeShare_stateVarId_field = 9


        field volumeShare = volumeShare_oldCommitment_value


        // We need to hard-code each stateVarId into the circuit:
        field dailyInterestRate_stateVarId_field = 11


        field dailyInterestRate = dailyInterestRate_oldCommitment_value


        // We need to hard-code each stateVarId into the circuit:
        field expiryDateOfContract_stateVarId_field = 13


        field expiryDateOfContract = expiryDateOfContract_oldCommitment_value


        // We need to hard-code the mappingId's of mappings into the circuit:
        field shortfalls_mappingId = 20


        Shortfall shortfalls_index = shortfalls_index_oldCommitment_value


        // We need to hard-code each stateVarId into the circuit:
        field latestShortfallSequenceNumber_stateVarId_field = 22


        field latestShortfallSequenceNumber = latestShortfallSequenceNumber_oldCommitment_value


        // We need to hard-code the mappingId's of mappings into the circuit:
        field surplus_mappingId = 27


        Shortfall surplus_tempSurplusIndex = surplus_tempSurplusIndex_oldCommitment_value


        // We need to hard-code each stateVarId into the circuit:
        field latestSurplusSequenceNumber_stateVarId_field = 29


        field latestSurplusSequenceNumber = latestSurplusSequenceNumber_oldCommitment_value


        // We need to hard-code each stateVarId into the circuit:
        field sequenceNumberInterval_stateVarId_field = 31


        field sequenceNumberInterval = sequenceNumberInterval_oldCommitment_value


        // We need to hard-code the mappingId's of mappings into the circuit:
        field generatorCharges_mappingId = 42


        field generatorCharges_billNumber = generatorCharges_billNumber_oldCommitment_value


        // We need to hard-code the mappingId's of mappings into the circuit:
        field offtakerCharges_mappingId = 46


        field offtakerCharges_billNumber = offtakerCharges_billNumber_oldCommitment_value


        // We need to hard-code the mappingId's of mappings into the circuit:
        field generatorInterest_mappingId = 50


        field generatorInterest_billNumber = generatorInterest_billNumber_oldCommitment_value


        // We need to hard-code the mappingId's of mappings into the circuit:
        field offtakerInterest_mappingId = 54


        field offtakerInterest_billNumber = offtakerInterest_billNumber_oldCommitment_value


        // We need to hard-code the mappingId's of mappings into the circuit:
        field negativePriceCharges_mappingId = 58


        field negativePriceCharges_billNumber = negativePriceCharges_billNumber_oldCommitment_value


        // We need to hard-code each stateVarId into the circuit:
        field numberOfConsecutivePeriodsForShortfall_stateVarId_field = 60


        field numberOfConsecutivePeriodsForShortfall = numberOfConsecutivePeriodsForShortfall_oldCommitment_value


        // We need to hard-code each stateVarId into the circuit:
        field shortfallThreshold_stateVarId_field = 62


        field shortfallThreshold = shortfallThreshold_oldCommitment_value


        // We need to hard-code each stateVarId into the circuit:
        field shortfallChargeSum_stateVarId_field = 64


        field shortfallChargeSum = shortfallChargeSum_oldCommitment_value


        // We need to hard-code each stateVarId into the circuit:
        field shortfallIndex_stateVarId_field = 66


        field shortfallIndex = shortfallIndex_oldCommitment_value


        // We need to hard-code the mappingId's of mappings into the circuit:
        field shortfallCharges_mappingId = 70


        field shortfallCharges_billNumber = shortfallCharges_billNumber_oldCommitment_value


        // We need to hard-code each stateVarId into the circuit:
        field numberOfConsecutivePeriodsForSurplus_stateVarId_field = 72


        field numberOfConsecutivePeriodsForSurplus = numberOfConsecutivePeriodsForSurplus_oldCommitment_value


        // We need to hard-code each stateVarId into the circuit:
        field surplusThreshold_stateVarId_field = 74


        field surplusThreshold = surplusThreshold_oldCommitment_value


        // We need to hard-code each stateVarId into the circuit:
        field surplusChargeSum_stateVarId_field = 76


        field surplusChargeSum = surplusChargeSum_oldCommitment_value


        // We need to hard-code each stateVarId into the circuit:
        field surplusIndex_stateVarId_field = 78


        field surplusIndex = surplusIndex_oldCommitment_value


        // We need to hard-code the mappingId's of mappings into the circuit:
        field surplusCharges_mappingId = 82


        field surplusCharges_billNumber = surplusCharges_billNumber_oldCommitment_value


        assert(referenceDate < expiryDateOfContract)

		field offtakerVolume = totalGeneratedVolume * volumeShare

		field fixedAmount = offtakerVolume * bundlePrice * marginalLossFactor

negativePriceCharges_billNumber = expectedVolume * strikePrice - totalGeneratedVolume * strikePrice

		field index = shortfallIndex + 1

		field tempSurplusIndex = surplusIndex + 1


        field floatingAmount_temp = floatingAmount
        field fixedAmount_temp = fixedAmount
        generatorCharges_billNumber = if floatingAmount_temp > fixedAmount_temp then floatingAmount - fixedAmount + positiveAdjustment - negativeAdjustment else generatorCharges_billNumber fi
        offtakerCharges_billNumber = if floatingAmount_temp > fixedAmount_temp then offtakerCharges_billNumber else fixedAmount - floatingAmount + positiveAdjustment - negativeAdjustment fi

bool shortfallSequence = false
        
        field latestShortfallSequenceNumber_temp = latestShortfallSequenceNumber
        shortfallSequence = if sequenceNumber == latestShortfallSequenceNumber_temp + sequenceNumberInterval || latestShortfallSequenceNumber_temp == 0 || sequenceNumber == 0 then true else shortfallSequence fi

bool surplusSequence = false
        
        field latestSurplusSequenceNumber_temp = latestSurplusSequenceNumber
        surplusSequence = if sequenceNumber == latestSurplusSequenceNumber_temp + sequenceNumberInterval || latestSurplusSequenceNumber_temp == 0 || sequenceNumber == 0 then true else surplusSequence fi

		field priceDifference = 0


        field averagePrice_temp = averagePrice
        field strikePrice_temp = strikePrice
        priceDifference = if averagePrice_temp > strikePrice_temp then averagePrice - strikePrice else priceDifference fi
        priceDifference = if averagePrice_temp > strikePrice_temp then priceDifference else strikePrice - averagePrice fi

		field volumeDifference = 0


        field expectedVolume_temp = expectedVolume
        volumeDifference = if expectedVolume_temp > offtakerVolume then expectedVolume - totalGeneratedVolume else volumeDifference fi
        volumeDifference = if expectedVolume_temp > offtakerVolume then volumeDifference else totalGeneratedVolume - expectedVolume fi


        bool shortfallSequence_temp = shortfallSequence
        field volumeDifference_temp = volumeDifference
        field shortfallThreshold_temp = shortfallThreshold
        shortfalls_index.billNumber = if shortfallSequence_temp && expectedVolume_temp > offtakerVolume && volumeDifference_temp >= shortfallThreshold_temp then billNumber else shortfalls_index.billNumber fi
        shortfalls_index.price = if shortfallSequence_temp && expectedVolume_temp > offtakerVolume && volumeDifference_temp >= shortfallThreshold_temp then averagePrice else shortfalls_index.price fi
        shortfalls_index.volume = if shortfallSequence_temp && expectedVolume_temp > offtakerVolume && volumeDifference_temp >= shortfallThreshold_temp then shortfallThreshold - offtakerVolume else shortfalls_index.volume fi
        shortfallChargeSum = if shortfallSequence_temp && expectedVolume_temp > offtakerVolume && volumeDifference_temp >= shortfallThreshold_temp then shortfallChargeSum + shortfalls_index.volume * priceDifference else shortfallChargeSum fi
        shortfallIndex = if shortfallSequence_temp && expectedVolume_temp > offtakerVolume && volumeDifference_temp >= shortfallThreshold_temp then shortfallIndex + 1 else shortfallIndex fi
        latestShortfallSequenceNumber = if shortfallSequence_temp && expectedVolume_temp > offtakerVolume && volumeDifference_temp >= shortfallThreshold_temp then sequenceNumber else latestShortfallSequenceNumber fi


        
        shortfallChargeSum = if shortfallSequence_temp && (expectedVolume_temp < offtakerVolume || volumeDifference_temp <= shortfallThreshold_temp) then 0 else shortfallChargeSum fi
        shortfallIndex = if shortfallSequence_temp && (expectedVolume_temp < offtakerVolume || volumeDifference_temp <= shortfallThreshold_temp) then 0 else shortfallIndex fi
        latestShortfallSequenceNumber = if shortfallSequence_temp && (expectedVolume_temp < offtakerVolume || volumeDifference_temp <= shortfallThreshold_temp) then 0 else latestShortfallSequenceNumber fi


        field shortfallIndex_temp = shortfallIndex
        shortfallCharges_billNumber = if shortfallIndex_temp >= numberOfConsecutivePeriodsForShortfall then shortfallChargeSum else shortfallCharges_billNumber fi
        shortfallChargeSum = if shortfallIndex_temp >= numberOfConsecutivePeriodsForShortfall then 0 else shortfallChargeSum fi
        shortfallIndex = if shortfallIndex_temp >= numberOfConsecutivePeriodsForShortfall then 0 else shortfallIndex fi
        latestShortfallSequenceNumber = if shortfallIndex_temp >= numberOfConsecutivePeriodsForShortfall then 0 else latestShortfallSequenceNumber fi


        bool surplusSequence_temp = surplusSequence
        field surplusThreshold_temp = surplusThreshold
        surplus_tempSurplusIndex.billNumber = if surplusSequence_temp && expectedVolume_temp < offtakerVolume && volumeDifference_temp >= surplusThreshold_temp then billNumber else surplus_tempSurplusIndex.billNumber fi
        surplus_tempSurplusIndex.price = if surplusSequence_temp && expectedVolume_temp < offtakerVolume && volumeDifference_temp >= surplusThreshold_temp then averagePrice else surplus_tempSurplusIndex.price fi
        surplus_tempSurplusIndex.volume = if surplusSequence_temp && expectedVolume_temp < offtakerVolume && volumeDifference_temp >= surplusThreshold_temp then surplusThreshold - offtakerVolume else surplus_tempSurplusIndex.volume fi
        surplusChargeSum = if surplusSequence_temp && expectedVolume_temp < offtakerVolume && volumeDifference_temp >= surplusThreshold_temp then surplusChargeSum + surplus_tempSurplusIndex.volume * priceDifference else surplusChargeSum fi
        surplusIndex = if surplusSequence_temp && expectedVolume_temp < offtakerVolume && volumeDifference_temp >= surplusThreshold_temp then surplusIndex + 1 else surplusIndex fi
        latestSurplusSequenceNumber = if surplusSequence_temp && expectedVolume_temp < offtakerVolume && volumeDifference_temp >= surplusThreshold_temp then sequenceNumber else latestSurplusSequenceNumber fi


        
        surplusChargeSum = if surplusSequence_temp && (expectedVolume_temp > offtakerVolume || volumeDifference_temp <= surplusThreshold_temp) then 0 else surplusChargeSum fi
        surplusIndex = if surplusSequence_temp && (expectedVolume_temp > offtakerVolume || volumeDifference_temp <= surplusThreshold_temp) then 0 else surplusIndex fi
        latestSurplusSequenceNumber = if surplusSequence_temp && expectedVolume_temp > offtakerVolume || volumeDifference_temp <= surplusThreshold_temp then 0 else latestSurplusSequenceNumber fi


        field surplusIndex_temp = surplusIndex
        surplusCharges_billNumber = if surplusIndex_temp >= numberOfConsecutivePeriodsForSurplus then surplusChargeSum else surplusCharges_billNumber fi
        surplusChargeSum = if surplusIndex_temp >= numberOfConsecutivePeriodsForSurplus then 0 else surplusChargeSum fi
        surplusIndex = if surplusIndex_temp >= numberOfConsecutivePeriodsForSurplus then 0 else surplusIndex fi
        latestSurplusSequenceNumber = if surplusIndex_temp >= numberOfConsecutivePeriodsForSurplus then 0 else latestSurplusSequenceNumber fi

for u32 i in 0..5 do
            
        generatorInterest_billNumber = if outstandingGeneratorAmount[i] > 0 then generatorInterest_billNumber + outstandingGeneratorAmount[i] * generatorDelayDays[i] * dailyInterestRate else generatorInterest_billNumber fi

        offtakerInterest_billNumber = if outstandingOfftakerAmount[i] > 0 then offtakerInterest_billNumber + outstandingOfftakerAmount[i] * offtakerDelayDays[i] * dailyInterestRate else offtakerInterest_billNumber fi
            endfor

 


        // strikePrice_oldCommitment - PoKoSK:
        // The correctness of this secret key will be constrained within the oldCommitment existence check.

        field[2] strikePrice_oldCommitment_owner_publicKey_point = scalarMult(field_to_bool_256(strikePrice_oldCommitment_owner_secretKey), [curveParams().Gu, curveParams().Gv], curveParams())

        bool strikePrice_oldCommitment_owner_publicKey_sign = edwardsCompress(strikePrice_oldCommitment_owner_publicKey_point)[0]

        bool[254] strikePrice_oldCommitment_yBits = field_to_bool_256(strikePrice_oldCommitment_owner_publicKey_point[1])[2..256]
        strikePrice_oldCommitment_yBits[0] = strikePrice_oldCommitment_owner_publicKey_sign

        field strikePrice_oldCommitment_owner_publicKey = bool_256_to_field([false, false, ...strikePrice_oldCommitment_yBits])


        // Nullify strikePrice:

        field strikePrice_oldCommitment_nullifier_check_field = poseidon([\
          strikePrice_stateVarId_field,\
          strikePrice_oldCommitment_owner_secretKey,\
          strikePrice_oldCommitment_salt\
        ])

        assert(\
        field_to_bool_256(strikePrice_oldCommitment_nullifier)[8..256] == field_to_bool_256(strikePrice_oldCommitment_nullifier_check_field)[8..256]\
        )
        // strikePrice_oldCommitment_nullifier : non-existence check
        
       


        // strikePrice_oldCommitment_commitment: preimage check


        field strikePrice_oldCommitment_commitment_field = poseidon([\
          strikePrice_stateVarId_field,\
          strikePrice_oldCommitment_value,\
          strikePrice_oldCommitment_owner_publicKey,\
          strikePrice_oldCommitment_salt        ])


        // strikePrice_oldCommitment_commitment: existence check


        field strikePrice_commitmentRoot_check = checkRoot(\
          strikePrice_oldCommitment_membershipWitness_siblingPath,\
          strikePrice_oldCommitment_commitment_field,\
          strikePrice_oldCommitment_membershipWitness_index\
        )


    

        assert(\
          field_to_bool_256(commitmentRoot)[8..256] == field_to_bool_256(strikePrice_commitmentRoot_check)[8..256]\
        )


    
        // bundlePrice_oldCommitment - PoKoSK:
        // The correctness of this secret key will be constrained within the oldCommitment existence check.

        field[2] bundlePrice_oldCommitment_owner_publicKey_point = scalarMult(field_to_bool_256(bundlePrice_oldCommitment_owner_secretKey), [curveParams().Gu, curveParams().Gv], curveParams())

        bool bundlePrice_oldCommitment_owner_publicKey_sign = edwardsCompress(bundlePrice_oldCommitment_owner_publicKey_point)[0]

        bool[254] bundlePrice_oldCommitment_yBits = field_to_bool_256(bundlePrice_oldCommitment_owner_publicKey_point[1])[2..256]
        bundlePrice_oldCommitment_yBits[0] = bundlePrice_oldCommitment_owner_publicKey_sign

        field bundlePrice_oldCommitment_owner_publicKey = bool_256_to_field([false, false, ...bundlePrice_oldCommitment_yBits])


        // Nullify bundlePrice:

        field bundlePrice_oldCommitment_nullifier_check_field = poseidon([\
          bundlePrice_stateVarId_field,\
          bundlePrice_oldCommitment_owner_secretKey,\
          bundlePrice_oldCommitment_salt\
        ])

        assert(\
        field_to_bool_256(bundlePrice_oldCommitment_nullifier)[8..256] == field_to_bool_256(bundlePrice_oldCommitment_nullifier_check_field)[8..256]\
        )



        // bundlePrice_oldCommitment_commitment: preimage check


        field bundlePrice_oldCommitment_commitment_field = poseidon([\
          bundlePrice_stateVarId_field,\
          bundlePrice_oldCommitment_value,\
          bundlePrice_oldCommitment_owner_publicKey,\
          bundlePrice_oldCommitment_salt        ])


        // bundlePrice_oldCommitment_commitment: existence check


        field bundlePrice_commitmentRoot_check = checkRoot(\
          bundlePrice_oldCommitment_membershipWitness_siblingPath,\
          bundlePrice_oldCommitment_commitment_field,\
          bundlePrice_oldCommitment_membershipWitness_index\
        )


        assert(\
          field_to_bool_256(commitmentRoot)[8..256] == field_to_bool_256(bundlePrice_commitmentRoot_check)[8..256]\
        )


        // volumeShare_oldCommitment - PoKoSK:
        // The correctness of this secret key will be constrained within the oldCommitment existence check.

        field[2] volumeShare_oldCommitment_owner_publicKey_point = scalarMult(field_to_bool_256(volumeShare_oldCommitment_owner_secretKey), [curveParams().Gu, curveParams().Gv], curveParams())

        bool volumeShare_oldCommitment_owner_publicKey_sign = edwardsCompress(volumeShare_oldCommitment_owner_publicKey_point)[0]

        bool[254] volumeShare_oldCommitment_yBits = field_to_bool_256(volumeShare_oldCommitment_owner_publicKey_point[1])[2..256]
        volumeShare_oldCommitment_yBits[0] = volumeShare_oldCommitment_owner_publicKey_sign

        field volumeShare_oldCommitment_owner_publicKey = bool_256_to_field([false, false, ...volumeShare_oldCommitment_yBits])


        // Create the Nullifier  for volumeShare and no need to nnullify it as its accessed only:

        // Nullify volumeShare:

        field volumeShare_oldCommitment_nullifier_check_field = poseidon([\
          volumeShare_stateVarId_field,\
          volumeShare_oldCommitment_owner_secretKey,\
          volumeShare_oldCommitment_salt\
        ])

        assert(\
        field_to_bool_256(volumeShare_oldCommitment_nullifier)[8..256] == field_to_bool_256(volumeShare_oldCommitment_nullifier_check_field)[8..256]\
        )


        // volumeShare_oldCommitment_commitment: preimage check


        field volumeShare_oldCommitment_commitment_field = poseidon([\
          volumeShare_stateVarId_field,\
          volumeShare_oldCommitment_value,\
          volumeShare_oldCommitment_owner_publicKey,\
          volumeShare_oldCommitment_salt        ])


        // volumeShare_oldCommitment_commitment: existence check


        field volumeShare_commitmentRoot_check = checkRoot(\
          volumeShare_oldCommitment_membershipWitness_siblingPath,\
          volumeShare_oldCommitment_commitment_field,\
          volumeShare_oldCommitment_membershipWitness_index\
        )


        assert(\
          field_to_bool_256(commitmentRoot)[8..256] == field_to_bool_256(volumeShare_commitmentRoot_check)[8..256]\
        )


        // dailyInterestRate_oldCommitment - PoKoSK:
        // The correctness of this secret key will be constrained within the oldCommitment existence check.

        field[2] dailyInterestRate_oldCommitment_owner_publicKey_point = scalarMult(field_to_bool_256(dailyInterestRate_oldCommitment_owner_secretKey), [curveParams().Gu, curveParams().Gv], curveParams())

        bool dailyInterestRate_oldCommitment_owner_publicKey_sign = edwardsCompress(dailyInterestRate_oldCommitment_owner_publicKey_point)[0]

        bool[254] dailyInterestRate_oldCommitment_yBits = field_to_bool_256(dailyInterestRate_oldCommitment_owner_publicKey_point[1])[2..256]
        dailyInterestRate_oldCommitment_yBits[0] = dailyInterestRate_oldCommitment_owner_publicKey_sign

        field dailyInterestRate_oldCommitment_owner_publicKey = bool_256_to_field([false, false, ...dailyInterestRate_oldCommitment_yBits])


        // Nullify dailyInterestRate:

        field dailyInterestRate_oldCommitment_nullifier_check_field = poseidon([\
          dailyInterestRate_stateVarId_field,\
          dailyInterestRate_oldCommitment_owner_secretKey,\
          dailyInterestRate_oldCommitment_salt\
        ])

        assert(\
        field_to_bool_256(dailyInterestRate_oldCommitment_nullifier)[8..256] == field_to_bool_256(dailyInterestRate_oldCommitment_nullifier_check_field)[8..256]\
        )


        // dailyInterestRate_oldCommitment_commitment: preimage check


        field dailyInterestRate_oldCommitment_commitment_field = poseidon([\
          dailyInterestRate_stateVarId_field,\
          dailyInterestRate_oldCommitment_value,\
          dailyInterestRate_oldCommitment_owner_publicKey,\
          dailyInterestRate_oldCommitment_salt        ])


        // dailyInterestRate_oldCommitment_commitment: existence check


        field dailyInterestRate_commitmentRoot_check = checkRoot(\
          dailyInterestRate_oldCommitment_membershipWitness_siblingPath,\
          dailyInterestRate_oldCommitment_commitment_field,\
          dailyInterestRate_oldCommitment_membershipWitness_index\
        )


        assert(\
          field_to_bool_256(commitmentRoot)[8..256] == field_to_bool_256(dailyInterestRate_commitmentRoot_check)[8..256]\
        )


        // expiryDateOfContract_oldCommitment - PoKoSK:
        // The correctness of this secret key will be constrained within the oldCommitment existence check.

        field[2] expiryDateOfContract_oldCommitment_owner_publicKey_point = scalarMult(field_to_bool_256(expiryDateOfContract_oldCommitment_owner_secretKey), [curveParams().Gu, curveParams().Gv], curveParams())

        bool expiryDateOfContract_oldCommitment_owner_publicKey_sign = edwardsCompress(expiryDateOfContract_oldCommitment_owner_publicKey_point)[0]

        bool[254] expiryDateOfContract_oldCommitment_yBits = field_to_bool_256(expiryDateOfContract_oldCommitment_owner_publicKey_point[1])[2..256]
        expiryDateOfContract_oldCommitment_yBits[0] = expiryDateOfContract_oldCommitment_owner_publicKey_sign

        field expiryDateOfContract_oldCommitment_owner_publicKey = bool_256_to_field([false, false, ...expiryDateOfContract_oldCommitment_yBits])


        // Nullify expiryDateOfContract:

        field expiryDateOfContract_oldCommitment_nullifier_check_field = poseidon([\
          expiryDateOfContract_stateVarId_field,\
          expiryDateOfContract_oldCommitment_owner_secretKey,\
          expiryDateOfContract_oldCommitment_salt\
        ])

        assert(\
        field_to_bool_256(expiryDateOfContract_oldCommitment_nullifier)[8..256] == field_to_bool_256(expiryDateOfContract_oldCommitment_nullifier_check_field)[8..256]\
        )
        // expiryDateOfContract_oldCommitment_nullifier : non-existence check
        
        


        // expiryDateOfContract_oldCommitment_commitment: preimage check


        field expiryDateOfContract_oldCommitment_commitment_field = poseidon([\
          expiryDateOfContract_stateVarId_field,\
          expiryDateOfContract_oldCommitment_value,\
          expiryDateOfContract_oldCommitment_owner_publicKey,\
          expiryDateOfContract_oldCommitment_salt        ])


        // expiryDateOfContract_oldCommitment_commitment: existence check


        field expiryDateOfContract_commitmentRoot_check = checkRoot(\
          expiryDateOfContract_oldCommitment_membershipWitness_siblingPath,\
          expiryDateOfContract_oldCommitment_commitment_field,\
          expiryDateOfContract_oldCommitment_membershipWitness_index\
        )


        assert(\
          field_to_bool_256(commitmentRoot)[8..256] == field_to_bool_256(expiryDateOfContract_commitmentRoot_check)[8..256]\
        )


        field shortfalls_index_stateVarId_field = mimc2([shortfalls_mappingId, index])


        // shortfalls_index_oldCommitment - PoKoSK:
        // The correctness of this secret key will be constrained within the oldCommitment existence check.

        field[2] shortfalls_index_oldCommitment_owner_publicKey_point = scalarMult(field_to_bool_256(shortfalls_index_oldCommitment_owner_secretKey), [curveParams().Gu, curveParams().Gv], curveParams())

        bool shortfalls_index_oldCommitment_owner_publicKey_sign = edwardsCompress(shortfalls_index_oldCommitment_owner_publicKey_point)[0]

        bool[254] shortfalls_index_oldCommitment_yBits = field_to_bool_256(shortfalls_index_oldCommitment_owner_publicKey_point[1])[2..256]
        shortfalls_index_oldCommitment_yBits[0] = shortfalls_index_oldCommitment_owner_publicKey_sign

        field shortfalls_index_oldCommitment_owner_publicKey = bool_256_to_field([false, false, ...shortfalls_index_oldCommitment_yBits])


        // Nullify shortfalls_index:

        field shortfalls_index_oldCommitment_nullifier_check_field = poseidon([\
          shortfalls_index_stateVarId_field,\
          shortfalls_index_oldCommitment_owner_secretKey,\
          shortfalls_index_oldCommitment_salt\
        ])

        assert(\
        field_to_bool_256(shortfalls_index_oldCommitment_nullifier)[8..256] == field_to_bool_256(shortfalls_index_oldCommitment_nullifier_check_field)[8..256]\
        )
        // shortfalls_index_oldCommitment_nullifier : non-existence check
        


          // shortfalls_index_oldCommitment_commitment: preimage check

          field shortfalls_index_oldCommitment_commitment_field = poseidon([\
            shortfalls_index_stateVarId_field,\
            	 shortfalls_index_oldCommitment_value.billNumber,\
	 shortfalls_index_oldCommitment_value.volume,\
	 shortfalls_index_oldCommitment_value.price,\
            shortfalls_index_oldCommitment_owner_publicKey,\
            shortfalls_index_oldCommitment_salt\
          ])


        // shortfalls_index_oldCommitment_commitment: existence check


        field shortfalls_index_commitmentRoot_check = checkRoot(\
          shortfalls_index_oldCommitment_membershipWitness_siblingPath,\
          shortfalls_index_oldCommitment_commitment_field,\
          shortfalls_index_oldCommitment_membershipWitness_index\
        )


        // Note: Don't bother actually asserting existence, if the oldCommitment is a dummy:
        shortfalls_index_commitmentRoot_check = if shortfalls_index_oldCommitment_isDummy == true then commitmentRoot else shortfalls_index_commitmentRoot_check fi


        assert(\
          field_to_bool_256(commitmentRoot)[8..256] == field_to_bool_256(shortfalls_index_commitmentRoot_check)[8..256]\
        )


          // prepare secret state 'shortfalls_index' for commitment

          Shortfall shortfalls_index_newCommitment_value = Shortfall {  billNumber: shortfalls_index.billNumber, volume: shortfalls_index.volume, price: shortfalls_index.price }

          // shortfalls_index_newCommitment_commitment - preimage check

          field shortfalls_index_newCommitment_commitment_check_field = poseidon([\
            shortfalls_index_stateVarId_field,\
            	 shortfalls_index_newCommitment_value.billNumber,\
	 shortfalls_index_newCommitment_value.volume,\
	 shortfalls_index_newCommitment_value.price,\
            shortfalls_index_newCommitment_owner_publicKey,\
            shortfalls_index_newCommitment_salt\
          ])

          assert(\
            field_to_bool_256(shortfalls_index_newCommitment_commitment)[8..256] == field_to_bool_256(shortfalls_index_newCommitment_commitment_check_field)[8..256]\
          )


        // latestShortfallSequenceNumber_oldCommitment - PoKoSK:
        // The correctness of this secret key will be constrained within the oldCommitment existence check.

        field[2] latestShortfallSequenceNumber_oldCommitment_owner_publicKey_point = scalarMult(field_to_bool_256(latestShortfallSequenceNumber_oldCommitment_owner_secretKey), [curveParams().Gu, curveParams().Gv], curveParams())

        bool latestShortfallSequenceNumber_oldCommitment_owner_publicKey_sign = edwardsCompress(latestShortfallSequenceNumber_oldCommitment_owner_publicKey_point)[0]

        bool[254] latestShortfallSequenceNumber_oldCommitment_yBits = field_to_bool_256(latestShortfallSequenceNumber_oldCommitment_owner_publicKey_point[1])[2..256]
        latestShortfallSequenceNumber_oldCommitment_yBits[0] = latestShortfallSequenceNumber_oldCommitment_owner_publicKey_sign

        field latestShortfallSequenceNumber_oldCommitment_owner_publicKey = bool_256_to_field([false, false, ...latestShortfallSequenceNumber_oldCommitment_yBits])


        // Nullify latestShortfallSequenceNumber:

        field latestShortfallSequenceNumber_oldCommitment_nullifier_check_field = poseidon([\
          latestShortfallSequenceNumber_stateVarId_field,\
          latestShortfallSequenceNumber_oldCommitment_owner_secretKey,\
          latestShortfallSequenceNumber_oldCommitment_salt\
        ])

        assert(\
        field_to_bool_256(latestShortfallSequenceNumber_oldCommitment_nullifier)[8..256] == field_to_bool_256(latestShortfallSequenceNumber_oldCommitment_nullifier_check_field)[8..256]\
        )
        
        


        // latestShortfallSequenceNumber_oldCommitment_commitment: preimage check


        field latestShortfallSequenceNumber_oldCommitment_commitment_field = poseidon([\
          latestShortfallSequenceNumber_stateVarId_field,\
          latestShortfallSequenceNumber_oldCommitment_value,\
          latestShortfallSequenceNumber_oldCommitment_owner_publicKey,\
          latestShortfallSequenceNumber_oldCommitment_salt        ])


        // latestShortfallSequenceNumber_oldCommitment_commitment: existence check


        field latestShortfallSequenceNumber_commitmentRoot_check = checkRoot(\
          latestShortfallSequenceNumber_oldCommitment_membershipWitness_siblingPath,\
          latestShortfallSequenceNumber_oldCommitment_commitment_field,\
          latestShortfallSequenceNumber_oldCommitment_membershipWitness_index\
        )


        // Note: Don't bother actually asserting existence, if the oldCommitment is a dummy:
        latestShortfallSequenceNumber_commitmentRoot_check = if latestShortfallSequenceNumber_oldCommitment_isDummy == true then commitmentRoot else latestShortfallSequenceNumber_commitmentRoot_check fi


        assert(\
          field_to_bool_256(commitmentRoot)[8..256] == field_to_bool_256(latestShortfallSequenceNumber_commitmentRoot_check)[8..256]\
        )


        // prepare secret state 'latestShortfallSequenceNumber' for commitment

        field latestShortfallSequenceNumber_newCommitment_value_field = latestShortfallSequenceNumber

        // latestShortfallSequenceNumber_newCommitment_commitment - preimage check

        field latestShortfallSequenceNumber_newCommitment_commitment_check_field = poseidon([\
          latestShortfallSequenceNumber_stateVarId_field,\
          latestShortfallSequenceNumber_newCommitment_value_field,\
          latestShortfallSequenceNumber_newCommitment_owner_publicKey,\
          latestShortfallSequenceNumber_newCommitment_salt\
        ])

        assert(\
          field_to_bool_256(latestShortfallSequenceNumber_newCommitment_commitment)[8..256] == field_to_bool_256(latestShortfallSequenceNumber_newCommitment_commitment_check_field)[8..256]\
        )


        field surplus_tempSurplusIndex_stateVarId_field = mimc2([surplus_mappingId, tempSurplusIndex])


        // surplus_tempSurplusIndex_oldCommitment - PoKoSK:
        // The correctness of this secret key will be constrained within the oldCommitment existence check.

        field[2] surplus_tempSurplusIndex_oldCommitment_owner_publicKey_point = scalarMult(field_to_bool_256(surplus_tempSurplusIndex_oldCommitment_owner_secretKey), [curveParams().Gu, curveParams().Gv], curveParams())

        bool surplus_tempSurplusIndex_oldCommitment_owner_publicKey_sign = edwardsCompress(surplus_tempSurplusIndex_oldCommitment_owner_publicKey_point)[0]

        bool[254] surplus_tempSurplusIndex_oldCommitment_yBits = field_to_bool_256(surplus_tempSurplusIndex_oldCommitment_owner_publicKey_point[1])[2..256]
        surplus_tempSurplusIndex_oldCommitment_yBits[0] = surplus_tempSurplusIndex_oldCommitment_owner_publicKey_sign

        field surplus_tempSurplusIndex_oldCommitment_owner_publicKey = bool_256_to_field([false, false, ...surplus_tempSurplusIndex_oldCommitment_yBits])


        // Nullify surplus_tempSurplusIndex:

        field surplus_tempSurplusIndex_oldCommitment_nullifier_check_field = poseidon([\
          surplus_tempSurplusIndex_stateVarId_field,\
          surplus_tempSurplusIndex_oldCommitment_owner_secretKey,\
          surplus_tempSurplusIndex_oldCommitment_salt\
        ])

        assert(\
        field_to_bool_256(surplus_tempSurplusIndex_oldCommitment_nullifier)[8..256] == field_to_bool_256(surplus_tempSurplusIndex_oldCommitment_nullifier_check_field)[8..256]\
        )
      


          // surplus_tempSurplusIndex_oldCommitment_commitment: preimage check

          field surplus_tempSurplusIndex_oldCommitment_commitment_field = poseidon([\
            surplus_tempSurplusIndex_stateVarId_field,\
            	 surplus_tempSurplusIndex_oldCommitment_value.billNumber,\
	 surplus_tempSurplusIndex_oldCommitment_value.volume,\
	 surplus_tempSurplusIndex_oldCommitment_value.price,\
            surplus_tempSurplusIndex_oldCommitment_owner_publicKey,\
            surplus_tempSurplusIndex_oldCommitment_salt\
          ])


        // surplus_tempSurplusIndex_oldCommitment_commitment: existence check


        field surplus_tempSurplusIndex_commitmentRoot_check = checkRoot(\
          surplus_tempSurplusIndex_oldCommitment_membershipWitness_siblingPath,\
          surplus_tempSurplusIndex_oldCommitment_commitment_field,\
          surplus_tempSurplusIndex_oldCommitment_membershipWitness_index\
        )


        // Note: Don't bother actually asserting existence, if the oldCommitment is a dummy:
        surplus_tempSurplusIndex_commitmentRoot_check = if surplus_tempSurplusIndex_oldCommitment_isDummy == true then commitmentRoot else surplus_tempSurplusIndex_commitmentRoot_check fi


        assert(\
          field_to_bool_256(commitmentRoot)[8..256] == field_to_bool_256(surplus_tempSurplusIndex_commitmentRoot_check)[8..256]\
        )


          // prepare secret state 'surplus_tempSurplusIndex' for commitment

          Shortfall surplus_tempSurplusIndex_newCommitment_value = Shortfall {  billNumber: surplus_tempSurplusIndex.billNumber, volume: surplus_tempSurplusIndex.volume, price: surplus_tempSurplusIndex.price }

          // surplus_tempSurplusIndex_newCommitment_commitment - preimage check

          field surplus_tempSurplusIndex_newCommitment_commitment_check_field = poseidon([\
            surplus_tempSurplusIndex_stateVarId_field,\
            	 surplus_tempSurplusIndex_newCommitment_value.billNumber,\
	 surplus_tempSurplusIndex_newCommitment_value.volume,\
	 surplus_tempSurplusIndex_newCommitment_value.price,\
            surplus_tempSurplusIndex_newCommitment_owner_publicKey,\
            surplus_tempSurplusIndex_newCommitment_salt\
          ])

          assert(\
            field_to_bool_256(surplus_tempSurplusIndex_newCommitment_commitment)[8..256] == field_to_bool_256(surplus_tempSurplusIndex_newCommitment_commitment_check_field)[8..256]\
          )


        // latestSurplusSequenceNumber_oldCommitment - PoKoSK:
        // The correctness of this secret key will be constrained within the oldCommitment existence check.

        field[2] latestSurplusSequenceNumber_oldCommitment_owner_publicKey_point = scalarMult(field_to_bool_256(latestSurplusSequenceNumber_oldCommitment_owner_secretKey), [curveParams().Gu, curveParams().Gv], curveParams())

        bool latestSurplusSequenceNumber_oldCommitment_owner_publicKey_sign = edwardsCompress(latestSurplusSequenceNumber_oldCommitment_owner_publicKey_point)[0]

        bool[254] latestSurplusSequenceNumber_oldCommitment_yBits = field_to_bool_256(latestSurplusSequenceNumber_oldCommitment_owner_publicKey_point[1])[2..256]
        latestSurplusSequenceNumber_oldCommitment_yBits[0] = latestSurplusSequenceNumber_oldCommitment_owner_publicKey_sign

        field latestSurplusSequenceNumber_oldCommitment_owner_publicKey = bool_256_to_field([false, false, ...latestSurplusSequenceNumber_oldCommitment_yBits])


        // Nullify latestSurplusSequenceNumber:

        field latestSurplusSequenceNumber_oldCommitment_nullifier_check_field = poseidon([\
          latestSurplusSequenceNumber_stateVarId_field,\
          latestSurplusSequenceNumber_oldCommitment_owner_secretKey,\
          latestSurplusSequenceNumber_oldCommitment_salt\
        ])

        assert(\
        field_to_bool_256(latestSurplusSequenceNumber_oldCommitment_nullifier)[8..256] == field_to_bool_256(latestSurplusSequenceNumber_oldCommitment_nullifier_check_field)[8..256]\
        )
        
        


        // latestSurplusSequenceNumber_oldCommitment_commitment: preimage check


        field latestSurplusSequenceNumber_oldCommitment_commitment_field = poseidon([\
          latestSurplusSequenceNumber_stateVarId_field,\
          latestSurplusSequenceNumber_oldCommitment_value,\
          latestSurplusSequenceNumber_oldCommitment_owner_publicKey,\
          latestSurplusSequenceNumber_oldCommitment_salt        ])


        // latestSurplusSequenceNumber_oldCommitment_commitment: existence check


        field latestSurplusSequenceNumber_commitmentRoot_check = checkRoot(\
          latestSurplusSequenceNumber_oldCommitment_membershipWitness_siblingPath,\
          latestSurplusSequenceNumber_oldCommitment_commitment_field,\
          latestSurplusSequenceNumber_oldCommitment_membershipWitness_index\
        )


        // Note: Don't bother actually asserting existence, if the oldCommitment is a dummy:
        latestSurplusSequenceNumber_commitmentRoot_check = if latestSurplusSequenceNumber_oldCommitment_isDummy == true then commitmentRoot else latestSurplusSequenceNumber_commitmentRoot_check fi


        assert(\
          field_to_bool_256(commitmentRoot)[8..256] == field_to_bool_256(latestSurplusSequenceNumber_commitmentRoot_check)[8..256]\
        )


        // prepare secret state 'latestSurplusSequenceNumber' for commitment

        field latestSurplusSequenceNumber_newCommitment_value_field = latestSurplusSequenceNumber

        // latestSurplusSequenceNumber_newCommitment_commitment - preimage check

        field latestSurplusSequenceNumber_newCommitment_commitment_check_field = poseidon([\
          latestSurplusSequenceNumber_stateVarId_field,\
          latestSurplusSequenceNumber_newCommitment_value_field,\
          latestSurplusSequenceNumber_newCommitment_owner_publicKey,\
          latestSurplusSequenceNumber_newCommitment_salt\
        ])

        assert(\
          field_to_bool_256(latestSurplusSequenceNumber_newCommitment_commitment)[8..256] == field_to_bool_256(latestSurplusSequenceNumber_newCommitment_commitment_check_field)[8..256]\
        )


        // sequenceNumberInterval_oldCommitment - PoKoSK:
        // The correctness of this secret key will be constrained within the oldCommitment existence check.

        field[2] sequenceNumberInterval_oldCommitment_owner_publicKey_point = scalarMult(field_to_bool_256(sequenceNumberInterval_oldCommitment_owner_secretKey), [curveParams().Gu, curveParams().Gv], curveParams())

        bool sequenceNumberInterval_oldCommitment_owner_publicKey_sign = edwardsCompress(sequenceNumberInterval_oldCommitment_owner_publicKey_point)[0]

        bool[254] sequenceNumberInterval_oldCommitment_yBits = field_to_bool_256(sequenceNumberInterval_oldCommitment_owner_publicKey_point[1])[2..256]
        sequenceNumberInterval_oldCommitment_yBits[0] = sequenceNumberInterval_oldCommitment_owner_publicKey_sign

        field sequenceNumberInterval_oldCommitment_owner_publicKey = bool_256_to_field([false, false, ...sequenceNumberInterval_oldCommitment_yBits])


        // Nullify sequenceNumberInterval:

        field sequenceNumberInterval_oldCommitment_nullifier_check_field = poseidon([\
          sequenceNumberInterval_stateVarId_field,\
          sequenceNumberInterval_oldCommitment_owner_secretKey,\
          sequenceNumberInterval_oldCommitment_salt\
        ])

        assert(\
        field_to_bool_256(sequenceNumberInterval_oldCommitment_nullifier)[8..256] == field_to_bool_256(sequenceNumberInterval_oldCommitment_nullifier_check_field)[8..256]\
        )
        


        // sequenceNumberInterval_oldCommitment_commitment: preimage check


        field sequenceNumberInterval_oldCommitment_commitment_field = poseidon([\
          sequenceNumberInterval_stateVarId_field,\
          sequenceNumberInterval_oldCommitment_value,\
          sequenceNumberInterval_oldCommitment_owner_publicKey,\
          sequenceNumberInterval_oldCommitment_salt        ])


        // sequenceNumberInterval_oldCommitment_commitment: existence check


        field sequenceNumberInterval_commitmentRoot_check = checkRoot(\
          sequenceNumberInterval_oldCommitment_membershipWitness_siblingPath,\
          sequenceNumberInterval_oldCommitment_commitment_field,\
          sequenceNumberInterval_oldCommitment_membershipWitness_index\
        )


        assert(\
          field_to_bool_256(commitmentRoot)[8..256] == field_to_bool_256(sequenceNumberInterval_commitmentRoot_check)[8..256]\
        )


        field generatorCharges_billNumber_stateVarId_field = mimc2([generatorCharges_mappingId, billNumber])


        // generatorCharges_billNumber_oldCommitment - PoKoSK:
        // The correctness of this secret key will be constrained within the oldCommitment existence check.

        field[2] generatorCharges_billNumber_oldCommitment_owner_publicKey_point = scalarMult(field_to_bool_256(generatorCharges_billNumber_oldCommitment_owner_secretKey), [curveParams().Gu, curveParams().Gv], curveParams())

        bool generatorCharges_billNumber_oldCommitment_owner_publicKey_sign = edwardsCompress(generatorCharges_billNumber_oldCommitment_owner_publicKey_point)[0]

        bool[254] generatorCharges_billNumber_oldCommitment_yBits = field_to_bool_256(generatorCharges_billNumber_oldCommitment_owner_publicKey_point[1])[2..256]
        generatorCharges_billNumber_oldCommitment_yBits[0] = generatorCharges_billNumber_oldCommitment_owner_publicKey_sign

        field generatorCharges_billNumber_oldCommitment_owner_publicKey = bool_256_to_field([false, false, ...generatorCharges_billNumber_oldCommitment_yBits])


        // Nullify generatorCharges_billNumber:

        field generatorCharges_billNumber_oldCommitment_nullifier_check_field = poseidon([\
          generatorCharges_billNumber_stateVarId_field,\
          generatorCharges_billNumber_oldCommitment_owner_secretKey,\
          generatorCharges_billNumber_oldCommitment_salt\
        ])

        assert(\
        field_to_bool_256(generatorCharges_billNumber_oldCommitment_nullifier)[8..256] == field_to_bool_256(generatorCharges_billNumber_oldCommitment_nullifier_check_field)[8..256]\
        )
       


        // generatorCharges_billNumber_oldCommitment_commitment: preimage check


        field generatorCharges_billNumber_oldCommitment_commitment_field = poseidon([\
          generatorCharges_billNumber_stateVarId_field,\
          generatorCharges_billNumber_oldCommitment_value,\
          generatorCharges_billNumber_oldCommitment_owner_publicKey,\
          generatorCharges_billNumber_oldCommitment_salt        ])


        // generatorCharges_billNumber_oldCommitment_commitment: existence check


        field generatorCharges_billNumber_commitmentRoot_check = checkRoot(\
          generatorCharges_billNumber_oldCommitment_membershipWitness_siblingPath,\
          generatorCharges_billNumber_oldCommitment_commitment_field,\
          generatorCharges_billNumber_oldCommitment_membershipWitness_index\
        )


        // Note: Don't bother actually asserting existence, if the oldCommitment is a dummy:
        generatorCharges_billNumber_commitmentRoot_check = if generatorCharges_billNumber_oldCommitment_isDummy == true then commitmentRoot else generatorCharges_billNumber_commitmentRoot_check fi


        assert(\
          field_to_bool_256(commitmentRoot)[8..256] == field_to_bool_256(generatorCharges_billNumber_commitmentRoot_check)[8..256]\
        )


        // prepare secret state 'generatorCharges_billNumber' for commitment

        field generatorCharges_billNumber_newCommitment_value_field = generatorCharges_billNumber

        // generatorCharges_billNumber_newCommitment_commitment - preimage check

        field generatorCharges_billNumber_newCommitment_commitment_check_field = poseidon([\
          generatorCharges_billNumber_stateVarId_field,\
          generatorCharges_billNumber_newCommitment_value_field,\
          generatorCharges_billNumber_newCommitment_owner_publicKey,\
          generatorCharges_billNumber_newCommitment_salt\
        ])

        assert(\
          field_to_bool_256(generatorCharges_billNumber_newCommitment_commitment)[8..256] == field_to_bool_256(generatorCharges_billNumber_newCommitment_commitment_check_field)[8..256]\
        )


        field offtakerCharges_billNumber_stateVarId_field = mimc2([offtakerCharges_mappingId, billNumber])


        // offtakerCharges_billNumber_oldCommitment - PoKoSK:
        // The correctness of this secret key will be constrained within the oldCommitment existence check.

        field[2] offtakerCharges_billNumber_oldCommitment_owner_publicKey_point = scalarMult(field_to_bool_256(offtakerCharges_billNumber_oldCommitment_owner_secretKey), [curveParams().Gu, curveParams().Gv], curveParams())

        bool offtakerCharges_billNumber_oldCommitment_owner_publicKey_sign = edwardsCompress(offtakerCharges_billNumber_oldCommitment_owner_publicKey_point)[0]

        bool[254] offtakerCharges_billNumber_oldCommitment_yBits = field_to_bool_256(offtakerCharges_billNumber_oldCommitment_owner_publicKey_point[1])[2..256]
        offtakerCharges_billNumber_oldCommitment_yBits[0] = offtakerCharges_billNumber_oldCommitment_owner_publicKey_sign

        field offtakerCharges_billNumber_oldCommitment_owner_publicKey = bool_256_to_field([false, false, ...offtakerCharges_billNumber_oldCommitment_yBits])


        // Nullify offtakerCharges_billNumber:

        field offtakerCharges_billNumber_oldCommitment_nullifier_check_field = poseidon([\
          offtakerCharges_billNumber_stateVarId_field,\
          offtakerCharges_billNumber_oldCommitment_owner_secretKey,\
          offtakerCharges_billNumber_oldCommitment_salt\
        ])

        assert(\
        field_to_bool_256(offtakerCharges_billNumber_oldCommitment_nullifier)[8..256] == field_to_bool_256(offtakerCharges_billNumber_oldCommitment_nullifier_check_field)[8..256]\
        )
        
        


        // offtakerCharges_billNumber_oldCommitment_commitment: preimage check


        field offtakerCharges_billNumber_oldCommitment_commitment_field = poseidon([\
          offtakerCharges_billNumber_stateVarId_field,\
          offtakerCharges_billNumber_oldCommitment_value,\
          offtakerCharges_billNumber_oldCommitment_owner_publicKey,\
          offtakerCharges_billNumber_oldCommitment_salt        ])


        // offtakerCharges_billNumber_oldCommitment_commitment: existence check


        field offtakerCharges_billNumber_commitmentRoot_check = checkRoot(\
          offtakerCharges_billNumber_oldCommitment_membershipWitness_siblingPath,\
          offtakerCharges_billNumber_oldCommitment_commitment_field,\
          offtakerCharges_billNumber_oldCommitment_membershipWitness_index\
        )


        // Note: Don't bother actually asserting existence, if the oldCommitment is a dummy:
        offtakerCharges_billNumber_commitmentRoot_check = if offtakerCharges_billNumber_oldCommitment_isDummy == true then commitmentRoot else offtakerCharges_billNumber_commitmentRoot_check fi


        assert(\
          field_to_bool_256(commitmentRoot)[8..256] == field_to_bool_256(offtakerCharges_billNumber_commitmentRoot_check)[8..256]\
        )


        // prepare secret state 'offtakerCharges_billNumber' for commitment

        field offtakerCharges_billNumber_newCommitment_value_field = offtakerCharges_billNumber

        // offtakerCharges_billNumber_newCommitment_commitment - preimage check

        field offtakerCharges_billNumber_newCommitment_commitment_check_field = poseidon([\
          offtakerCharges_billNumber_stateVarId_field,\
          offtakerCharges_billNumber_newCommitment_value_field,\
          offtakerCharges_billNumber_newCommitment_owner_publicKey,\
          offtakerCharges_billNumber_newCommitment_salt\
        ])

        assert(\
          field_to_bool_256(offtakerCharges_billNumber_newCommitment_commitment)[8..256] == field_to_bool_256(offtakerCharges_billNumber_newCommitment_commitment_check_field)[8..256]\
        )


        field generatorInterest_billNumber_stateVarId_field = mimc2([generatorInterest_mappingId, billNumber])


        // generatorInterest_billNumber_oldCommitment - PoKoSK:
        // The correctness of this secret key will be constrained within the oldCommitment existence check.

        field[2] generatorInterest_billNumber_oldCommitment_owner_publicKey_point = scalarMult(field_to_bool_256(generatorInterest_billNumber_oldCommitment_owner_secretKey), [curveParams().Gu, curveParams().Gv], curveParams())

        bool generatorInterest_billNumber_oldCommitment_owner_publicKey_sign = edwardsCompress(generatorInterest_billNumber_oldCommitment_owner_publicKey_point)[0]

        bool[254] generatorInterest_billNumber_oldCommitment_yBits = field_to_bool_256(generatorInterest_billNumber_oldCommitment_owner_publicKey_point[1])[2..256]
        generatorInterest_billNumber_oldCommitment_yBits[0] = generatorInterest_billNumber_oldCommitment_owner_publicKey_sign

        field generatorInterest_billNumber_oldCommitment_owner_publicKey = bool_256_to_field([false, false, ...generatorInterest_billNumber_oldCommitment_yBits])


        // Nullify generatorInterest_billNumber:

        field generatorInterest_billNumber_oldCommitment_nullifier_check_field = poseidon([\
          generatorInterest_billNumber_stateVarId_field,\
          generatorInterest_billNumber_oldCommitment_owner_secretKey,\
          generatorInterest_billNumber_oldCommitment_salt\
        ])

        assert(\
        field_to_bool_256(generatorInterest_billNumber_oldCommitment_nullifier)[8..256] == field_to_bool_256(generatorInterest_billNumber_oldCommitment_nullifier_check_field)[8..256]\
        )
        


        // generatorInterest_billNumber_oldCommitment_commitment: preimage check


        field generatorInterest_billNumber_oldCommitment_commitment_field = poseidon([\
          generatorInterest_billNumber_stateVarId_field,\
          generatorInterest_billNumber_oldCommitment_value,\
          generatorInterest_billNumber_oldCommitment_owner_publicKey,\
          generatorInterest_billNumber_oldCommitment_salt        ])


        // generatorInterest_billNumber_oldCommitment_commitment: existence check


        field generatorInterest_billNumber_commitmentRoot_check = checkRoot(\
          generatorInterest_billNumber_oldCommitment_membershipWitness_siblingPath,\
          generatorInterest_billNumber_oldCommitment_commitment_field,\
          generatorInterest_billNumber_oldCommitment_membershipWitness_index\
        )


        // Note: Don't bother actually asserting existence, if the oldCommitment is a dummy:
        generatorInterest_billNumber_commitmentRoot_check = if generatorInterest_billNumber_oldCommitment_isDummy == true then commitmentRoot else generatorInterest_billNumber_commitmentRoot_check fi


        assert(\
          field_to_bool_256(commitmentRoot)[8..256] == field_to_bool_256(generatorInterest_billNumber_commitmentRoot_check)[8..256]\
        )


        // prepare secret state 'generatorInterest_billNumber' for commitment

        field generatorInterest_billNumber_newCommitment_value_field = generatorInterest_billNumber

        // generatorInterest_billNumber_newCommitment_commitment - preimage check

        field generatorInterest_billNumber_newCommitment_commitment_check_field = poseidon([\
          generatorInterest_billNumber_stateVarId_field,\
          generatorInterest_billNumber_newCommitment_value_field,\
          generatorInterest_billNumber_newCommitment_owner_publicKey,\
          generatorInterest_billNumber_newCommitment_salt\
        ])

        assert(\
          field_to_bool_256(generatorInterest_billNumber_newCommitment_commitment)[8..256] == field_to_bool_256(generatorInterest_billNumber_newCommitment_commitment_check_field)[8..256]\
        )


        field offtakerInterest_billNumber_stateVarId_field = mimc2([offtakerInterest_mappingId, billNumber])


        // offtakerInterest_billNumber_oldCommitment - PoKoSK:
        // The correctness of this secret key will be constrained within the oldCommitment existence check.

        field[2] offtakerInterest_billNumber_oldCommitment_owner_publicKey_point = scalarMult(field_to_bool_256(offtakerInterest_billNumber_oldCommitment_owner_secretKey), [curveParams().Gu, curveParams().Gv], curveParams())

        bool offtakerInterest_billNumber_oldCommitment_owner_publicKey_sign = edwardsCompress(offtakerInterest_billNumber_oldCommitment_owner_publicKey_point)[0]

        bool[254] offtakerInterest_billNumber_oldCommitment_yBits = field_to_bool_256(offtakerInterest_billNumber_oldCommitment_owner_publicKey_point[1])[2..256]
        offtakerInterest_billNumber_oldCommitment_yBits[0] = offtakerInterest_billNumber_oldCommitment_owner_publicKey_sign

        field offtakerInterest_billNumber_oldCommitment_owner_publicKey = bool_256_to_field([false, false, ...offtakerInterest_billNumber_oldCommitment_yBits])


        // Nullify offtakerInterest_billNumber:

        field offtakerInterest_billNumber_oldCommitment_nullifier_check_field = poseidon([\
          offtakerInterest_billNumber_stateVarId_field,\
          offtakerInterest_billNumber_oldCommitment_owner_secretKey,\
          offtakerInterest_billNumber_oldCommitment_salt\
        ])

        assert(\
        field_to_bool_256(offtakerInterest_billNumber_oldCommitment_nullifier)[8..256] == field_to_bool_256(offtakerInterest_billNumber_oldCommitment_nullifier_check_field)[8..256]\
        )
        
        


        // offtakerInterest_billNumber_oldCommitment_commitment: preimage check


        field offtakerInterest_billNumber_oldCommitment_commitment_field = poseidon([\
          offtakerInterest_billNumber_stateVarId_field,\
          offtakerInterest_billNumber_oldCommitment_value,\
          offtakerInterest_billNumber_oldCommitment_owner_publicKey,\
          offtakerInterest_billNumber_oldCommitment_salt        ])


        // offtakerInterest_billNumber_oldCommitment_commitment: existence check


        field offtakerInterest_billNumber_commitmentRoot_check = checkRoot(\
          offtakerInterest_billNumber_oldCommitment_membershipWitness_siblingPath,\
          offtakerInterest_billNumber_oldCommitment_commitment_field,\
          offtakerInterest_billNumber_oldCommitment_membershipWitness_index\
        )


        // Note: Don't bother actually asserting existence, if the oldCommitment is a dummy:
        offtakerInterest_billNumber_commitmentRoot_check = if offtakerInterest_billNumber_oldCommitment_isDummy == true then commitmentRoot else offtakerInterest_billNumber_commitmentRoot_check fi


        assert(\
          field_to_bool_256(commitmentRoot)[8..256] == field_to_bool_256(offtakerInterest_billNumber_commitmentRoot_check)[8..256]\
        )


        // prepare secret state 'offtakerInterest_billNumber' for commitment

        field offtakerInterest_billNumber_newCommitment_value_field = offtakerInterest_billNumber

        // offtakerInterest_billNumber_newCommitment_commitment - preimage check

        field offtakerInterest_billNumber_newCommitment_commitment_check_field = poseidon([\
          offtakerInterest_billNumber_stateVarId_field,\
          offtakerInterest_billNumber_newCommitment_value_field,\
          offtakerInterest_billNumber_newCommitment_owner_publicKey,\
          offtakerInterest_billNumber_newCommitment_salt\
        ])

        assert(\
          field_to_bool_256(offtakerInterest_billNumber_newCommitment_commitment)[8..256] == field_to_bool_256(offtakerInterest_billNumber_newCommitment_commitment_check_field)[8..256]\
        )


        field negativePriceCharges_billNumber_stateVarId_field = mimc2([negativePriceCharges_mappingId, billNumber])


        // negativePriceCharges_billNumber_oldCommitment - PoKoSK:
        // The correctness of this secret key will be constrained within the oldCommitment existence check.

        field[2] negativePriceCharges_billNumber_oldCommitment_owner_publicKey_point = scalarMult(field_to_bool_256(negativePriceCharges_billNumber_oldCommitment_owner_secretKey), [curveParams().Gu, curveParams().Gv], curveParams())

        bool negativePriceCharges_billNumber_oldCommitment_owner_publicKey_sign = edwardsCompress(negativePriceCharges_billNumber_oldCommitment_owner_publicKey_point)[0]

        bool[254] negativePriceCharges_billNumber_oldCommitment_yBits = field_to_bool_256(negativePriceCharges_billNumber_oldCommitment_owner_publicKey_point[1])[2..256]
        negativePriceCharges_billNumber_oldCommitment_yBits[0] = negativePriceCharges_billNumber_oldCommitment_owner_publicKey_sign

        field negativePriceCharges_billNumber_oldCommitment_owner_publicKey = bool_256_to_field([false, false, ...negativePriceCharges_billNumber_oldCommitment_yBits])


        // Nullify negativePriceCharges_billNumber:

        field negativePriceCharges_billNumber_oldCommitment_nullifier_check_field = poseidon([\
          negativePriceCharges_billNumber_stateVarId_field,\
          negativePriceCharges_billNumber_oldCommitment_owner_secretKey,\
          negativePriceCharges_billNumber_oldCommitment_salt\
        ])

        assert(\
        field_to_bool_256(negativePriceCharges_billNumber_oldCommitment_nullifier)[8..256] == field_to_bool_256(negativePriceCharges_billNumber_oldCommitment_nullifier_check_field)[8..256]\
        )
        


        // negativePriceCharges_billNumber_oldCommitment_commitment: preimage check


        field negativePriceCharges_billNumber_oldCommitment_commitment_field = poseidon([\
          negativePriceCharges_billNumber_stateVarId_field,\
          negativePriceCharges_billNumber_oldCommitment_value,\
          negativePriceCharges_billNumber_oldCommitment_owner_publicKey,\
          negativePriceCharges_billNumber_oldCommitment_salt        ])


        // negativePriceCharges_billNumber_oldCommitment_commitment: existence check


        field negativePriceCharges_billNumber_commitmentRoot_check = checkRoot(\
          negativePriceCharges_billNumber_oldCommitment_membershipWitness_siblingPath,\
          negativePriceCharges_billNumber_oldCommitment_commitment_field,\
          negativePriceCharges_billNumber_oldCommitment_membershipWitness_index\
        )


        // Note: Don't bother actually asserting existence, if the oldCommitment is a dummy:
        negativePriceCharges_billNumber_commitmentRoot_check = if negativePriceCharges_billNumber_oldCommitment_isDummy == true then commitmentRoot else negativePriceCharges_billNumber_commitmentRoot_check fi


        assert(\
          field_to_bool_256(commitmentRoot)[8..256] == field_to_bool_256(negativePriceCharges_billNumber_commitmentRoot_check)[8..256]\
        )


        // prepare secret state 'negativePriceCharges_billNumber' for commitment

        field negativePriceCharges_billNumber_newCommitment_value_field = negativePriceCharges_billNumber

        // negativePriceCharges_billNumber_newCommitment_commitment - preimage check

        field negativePriceCharges_billNumber_newCommitment_commitment_check_field = poseidon([\
          negativePriceCharges_billNumber_stateVarId_field,\
          negativePriceCharges_billNumber_newCommitment_value_field,\
          negativePriceCharges_billNumber_newCommitment_owner_publicKey,\
          negativePriceCharges_billNumber_newCommitment_salt\
        ])

        assert(\
          field_to_bool_256(negativePriceCharges_billNumber_newCommitment_commitment)[8..256] == field_to_bool_256(negativePriceCharges_billNumber_newCommitment_commitment_check_field)[8..256]\
        )


        // numberOfConsecutivePeriodsForShortfall_oldCommitment - PoKoSK:
        // The correctness of this secret key will be constrained within the oldCommitment existence check.

        field[2] numberOfConsecutivePeriodsForShortfall_oldCommitment_owner_publicKey_point = scalarMult(field_to_bool_256(numberOfConsecutivePeriodsForShortfall_oldCommitment_owner_secretKey), [curveParams().Gu, curveParams().Gv], curveParams())

        bool numberOfConsecutivePeriodsForShortfall_oldCommitment_owner_publicKey_sign = edwardsCompress(numberOfConsecutivePeriodsForShortfall_oldCommitment_owner_publicKey_point)[0]

        bool[254] numberOfConsecutivePeriodsForShortfall_oldCommitment_yBits = field_to_bool_256(numberOfConsecutivePeriodsForShortfall_oldCommitment_owner_publicKey_point[1])[2..256]
        numberOfConsecutivePeriodsForShortfall_oldCommitment_yBits[0] = numberOfConsecutivePeriodsForShortfall_oldCommitment_owner_publicKey_sign

        field numberOfConsecutivePeriodsForShortfall_oldCommitment_owner_publicKey = bool_256_to_field([false, false, ...numberOfConsecutivePeriodsForShortfall_oldCommitment_yBits])


        // Create the Nullifier  for numberOfConsecutivePeriodsForShortfall and no need to nnullify it as its accessed only:

        // Nullify numberOfConsecutivePeriodsForShortfall:

        field numberOfConsecutivePeriodsForShortfall_oldCommitment_nullifier_check_field = poseidon([\
          numberOfConsecutivePeriodsForShortfall_stateVarId_field,\
          numberOfConsecutivePeriodsForShortfall_oldCommitment_owner_secretKey,\
          numberOfConsecutivePeriodsForShortfall_oldCommitment_salt\
        ])

        assert(\
        field_to_bool_256(numberOfConsecutivePeriodsForShortfall_oldCommitment_nullifier)[8..256] == field_to_bool_256(numberOfConsecutivePeriodsForShortfall_oldCommitment_nullifier_check_field)[8..256]\
        )
        


        // numberOfConsecutivePeriodsForShortfall_oldCommitment_commitment: preimage check


        field numberOfConsecutivePeriodsForShortfall_oldCommitment_commitment_field = poseidon([\
          numberOfConsecutivePeriodsForShortfall_stateVarId_field,\
          numberOfConsecutivePeriodsForShortfall_oldCommitment_value,\
          numberOfConsecutivePeriodsForShortfall_oldCommitment_owner_publicKey,\
          numberOfConsecutivePeriodsForShortfall_oldCommitment_salt        ])


        // numberOfConsecutivePeriodsForShortfall_oldCommitment_commitment: existence check


        field numberOfConsecutivePeriodsForShortfall_commitmentRoot_check = checkRoot(\
          numberOfConsecutivePeriodsForShortfall_oldCommitment_membershipWitness_siblingPath,\
          numberOfConsecutivePeriodsForShortfall_oldCommitment_commitment_field,\
          numberOfConsecutivePeriodsForShortfall_oldCommitment_membershipWitness_index\
        )


        assert(\
          field_to_bool_256(commitmentRoot)[8..256] == field_to_bool_256(numberOfConsecutivePeriodsForShortfall_commitmentRoot_check)[8..256]\
        )


        // shortfallThreshold_oldCommitment - PoKoSK:
        // The correctness of this secret key will be constrained within the oldCommitment existence check.

        field[2] shortfallThreshold_oldCommitment_owner_publicKey_point = scalarMult(field_to_bool_256(shortfallThreshold_oldCommitment_owner_secretKey), [curveParams().Gu, curveParams().Gv], curveParams())

        bool shortfallThreshold_oldCommitment_owner_publicKey_sign = edwardsCompress(shortfallThreshold_oldCommitment_owner_publicKey_point)[0]

        bool[254] shortfallThreshold_oldCommitment_yBits = field_to_bool_256(shortfallThreshold_oldCommitment_owner_publicKey_point[1])[2..256]
        shortfallThreshold_oldCommitment_yBits[0] = shortfallThreshold_oldCommitment_owner_publicKey_sign

        field shortfallThreshold_oldCommitment_owner_publicKey = bool_256_to_field([false, false, ...shortfallThreshold_oldCommitment_yBits])


        // Nullify shortfallThreshold:

        field shortfallThreshold_oldCommitment_nullifier_check_field = poseidon([\
          shortfallThreshold_stateVarId_field,\
          shortfallThreshold_oldCommitment_owner_secretKey,\
          shortfallThreshold_oldCommitment_salt\
        ])

        assert(\
        field_to_bool_256(shortfallThreshold_oldCommitment_nullifier)[8..256] == field_to_bool_256(shortfallThreshold_oldCommitment_nullifier_check_field)[8..256]\
        )
        // shortfallThreshold_oldCommitment_nullifier : non-existence check
        

        // shortfallThreshold_oldCommitment_commitment: preimage check


        field shortfallThreshold_oldCommitment_commitment_field = poseidon([\
          shortfallThreshold_stateVarId_field,\
          shortfallThreshold_oldCommitment_value,\
          shortfallThreshold_oldCommitment_owner_publicKey,\
          shortfallThreshold_oldCommitment_salt        ])


        // shortfallThreshold_oldCommitment_commitment: existence check


        field shortfallThreshold_commitmentRoot_check = checkRoot(\
          shortfallThreshold_oldCommitment_membershipWitness_siblingPath,\
          shortfallThreshold_oldCommitment_commitment_field,\
          shortfallThreshold_oldCommitment_membershipWitness_index\
        )


        assert(\
          field_to_bool_256(commitmentRoot)[8..256] == field_to_bool_256(shortfallThreshold_commitmentRoot_check)[8..256]\
        )


      
        // shortfallChargeSum_oldCommitment - PoKoSK:
        // The correctness of this secret key will be constrained within the oldCommitment existence check.

        field[2] shortfallChargeSum_oldCommitment_owner_publicKey_point = scalarMult(field_to_bool_256(shortfallChargeSum_oldCommitment_owner_secretKey), [curveParams().Gu, curveParams().Gv], curveParams())

        bool shortfallChargeSum_oldCommitment_owner_publicKey_sign = edwardsCompress(shortfallChargeSum_oldCommitment_owner_publicKey_point)[0]

        bool[254] shortfallChargeSum_oldCommitment_yBits = field_to_bool_256(shortfallChargeSum_oldCommitment_owner_publicKey_point[1])[2..256]
        shortfallChargeSum_oldCommitment_yBits[0] = shortfallChargeSum_oldCommitment_owner_publicKey_sign

        field shortfallChargeSum_oldCommitment_owner_publicKey = bool_256_to_field([false, false, ...shortfallChargeSum_oldCommitment_yBits])


        // Nullify shortfallChargeSum:

        field shortfallChargeSum_oldCommitment_nullifier_check_field = poseidon([\
          shortfallChargeSum_stateVarId_field,\
          shortfallChargeSum_oldCommitment_owner_secretKey,\
          shortfallChargeSum_oldCommitment_salt\
        ])

        assert(\
        field_to_bool_256(shortfallChargeSum_oldCommitment_nullifier)[8..256] == field_to_bool_256(shortfallChargeSum_oldCommitment_nullifier_check_field)[8..256]\
        )
        
        


        // shortfallChargeSum_oldCommitment_commitment: preimage check


        field shortfallChargeSum_oldCommitment_commitment_field = poseidon([\
          shortfallChargeSum_stateVarId_field,\
          shortfallChargeSum_oldCommitment_value,\
          shortfallChargeSum_oldCommitment_owner_publicKey,\
          shortfallChargeSum_oldCommitment_salt        ])


        // shortfallChargeSum_oldCommitment_commitment: existence check


        field shortfallChargeSum_commitmentRoot_check = checkRoot(\
          shortfallChargeSum_oldCommitment_membershipWitness_siblingPath,\
          shortfallChargeSum_oldCommitment_commitment_field,\
          shortfallChargeSum_oldCommitment_membershipWitness_index\
        )


        // Note: Don't bother actually asserting existence, if the oldCommitment is a dummy:
        shortfallChargeSum_commitmentRoot_check = if shortfallChargeSum_oldCommitment_isDummy == true then commitmentRoot else shortfallChargeSum_commitmentRoot_check fi


        assert(\
          field_to_bool_256(commitmentRoot)[8..256] == field_to_bool_256(shortfallChargeSum_commitmentRoot_check)[8..256]\
        )


        // prepare secret state 'shortfallChargeSum' for commitment

        field shortfallChargeSum_newCommitment_value_field = shortfallChargeSum

        // shortfallChargeSum_newCommitment_commitment - preimage check

        field shortfallChargeSum_newCommitment_commitment_check_field = poseidon([\
          shortfallChargeSum_stateVarId_field,\
          shortfallChargeSum_newCommitment_value_field,\
          shortfallChargeSum_newCommitment_owner_publicKey,\
          shortfallChargeSum_newCommitment_salt\
        ])

        assert(\
          field_to_bool_256(shortfallChargeSum_newCommitment_commitment)[8..256] == field_to_bool_256(shortfallChargeSum_newCommitment_commitment_check_field)[8..256]\
        )


        // shortfallIndex_oldCommitment - PoKoSK:
        // The correctness of this secret key will be constrained within the oldCommitment existence check.

        field[2] shortfallIndex_oldCommitment_owner_publicKey_point = scalarMult(field_to_bool_256(shortfallIndex_oldCommitment_owner_secretKey), [curveParams().Gu, curveParams().Gv], curveParams())

        bool shortfallIndex_oldCommitment_owner_publicKey_sign = edwardsCompress(shortfallIndex_oldCommitment_owner_publicKey_point)[0]

        bool[254] shortfallIndex_oldCommitment_yBits = field_to_bool_256(shortfallIndex_oldCommitment_owner_publicKey_point[1])[2..256]
        shortfallIndex_oldCommitment_yBits[0] = shortfallIndex_oldCommitment_owner_publicKey_sign

        field shortfallIndex_oldCommitment_owner_publicKey = bool_256_to_field([false, false, ...shortfallIndex_oldCommitment_yBits])


        // Nullify shortfallIndex:

        field shortfallIndex_oldCommitment_nullifier_check_field = poseidon([\
          shortfallIndex_stateVarId_field,\
          shortfallIndex_oldCommitment_owner_secretKey,\
          shortfallIndex_oldCommitment_salt\
        ])

        assert(\
        field_to_bool_256(shortfallIndex_oldCommitment_nullifier)[8..256] == field_to_bool_256(shortfallIndex_oldCommitment_nullifier_check_field)[8..256]\
        )
        


        // shortfallIndex_oldCommitment_commitment: preimage check


        field shortfallIndex_oldCommitment_commitment_field = poseidon([\
          shortfallIndex_stateVarId_field,\
          shortfallIndex_oldCommitment_value,\
          shortfallIndex_oldCommitment_owner_publicKey,\
          shortfallIndex_oldCommitment_salt        ])


        // shortfallIndex_oldCommitment_commitment: existence check


        field shortfallIndex_commitmentRoot_check = checkRoot(\
          shortfallIndex_oldCommitment_membershipWitness_siblingPath,\
          shortfallIndex_oldCommitment_commitment_field,\
          shortfallIndex_oldCommitment_membershipWitness_index\
        )


        // Note: Don't bother actually asserting existence, if the oldCommitment is a dummy:
        shortfallIndex_commitmentRoot_check = if shortfallIndex_oldCommitment_isDummy == true then commitmentRoot else shortfallIndex_commitmentRoot_check fi


        assert(\
          field_to_bool_256(commitmentRoot)[8..256] == field_to_bool_256(shortfallIndex_commitmentRoot_check)[8..256]\
        )


        // prepare secret state 'shortfallIndex' for commitment

        field shortfallIndex_newCommitment_value_field = shortfallIndex

        // shortfallIndex_newCommitment_commitment - preimage check

        field shortfallIndex_newCommitment_commitment_check_field = poseidon([\
          shortfallIndex_stateVarId_field,\
          shortfallIndex_newCommitment_value_field,\
          shortfallIndex_newCommitment_owner_publicKey,\
          shortfallIndex_newCommitment_salt\
        ])

        assert(\
          field_to_bool_256(shortfallIndex_newCommitment_commitment)[8..256] == field_to_bool_256(shortfallIndex_newCommitment_commitment_check_field)[8..256]\
        )


        field shortfallCharges_billNumber_stateVarId_field = mimc2([shortfallCharges_mappingId, billNumber])


        // shortfallCharges_billNumber_oldCommitment - PoKoSK:
        // The correctness of this secret key will be constrained within the oldCommitment existence check.

        field[2] shortfallCharges_billNumber_oldCommitment_owner_publicKey_point = scalarMult(field_to_bool_256(shortfallCharges_billNumber_oldCommitment_owner_secretKey), [curveParams().Gu, curveParams().Gv], curveParams())

        bool shortfallCharges_billNumber_oldCommitment_owner_publicKey_sign = edwardsCompress(shortfallCharges_billNumber_oldCommitment_owner_publicKey_point)[0]

        bool[254] shortfallCharges_billNumber_oldCommitment_yBits = field_to_bool_256(shortfallCharges_billNumber_oldCommitment_owner_publicKey_point[1])[2..256]
        shortfallCharges_billNumber_oldCommitment_yBits[0] = shortfallCharges_billNumber_oldCommitment_owner_publicKey_sign

        field shortfallCharges_billNumber_oldCommitment_owner_publicKey = bool_256_to_field([false, false, ...shortfallCharges_billNumber_oldCommitment_yBits])


        // Nullify shortfallCharges_billNumber:

        field shortfallCharges_billNumber_oldCommitment_nullifier_check_field = poseidon([\
          shortfallCharges_billNumber_stateVarId_field,\
          shortfallCharges_billNumber_oldCommitment_owner_secretKey,\
          shortfallCharges_billNumber_oldCommitment_salt\
        ])

        assert(\
        field_to_bool_256(shortfallCharges_billNumber_oldCommitment_nullifier)[8..256] == field_to_bool_256(shortfallCharges_billNumber_oldCommitment_nullifier_check_field)[8..256]\
        )
        
        


        // shortfallCharges_billNumber_oldCommitment_commitment: preimage check


        field shortfallCharges_billNumber_oldCommitment_commitment_field = poseidon([\
          shortfallCharges_billNumber_stateVarId_field,\
          shortfallCharges_billNumber_oldCommitment_value,\
          shortfallCharges_billNumber_oldCommitment_owner_publicKey,\
          shortfallCharges_billNumber_oldCommitment_salt        ])


        // shortfallCharges_billNumber_oldCommitment_commitment: existence check


        field shortfallCharges_billNumber_commitmentRoot_check = checkRoot(\
          shortfallCharges_billNumber_oldCommitment_membershipWitness_siblingPath,\
          shortfallCharges_billNumber_oldCommitment_commitment_field,\
          shortfallCharges_billNumber_oldCommitment_membershipWitness_index\
        )


        // Note: Don't bother actually asserting existence, if the oldCommitment is a dummy:
        shortfallCharges_billNumber_commitmentRoot_check = if shortfallCharges_billNumber_oldCommitment_isDummy == true then commitmentRoot else shortfallCharges_billNumber_commitmentRoot_check fi


        assert(\
          field_to_bool_256(commitmentRoot)[8..256] == field_to_bool_256(shortfallCharges_billNumber_commitmentRoot_check)[8..256]\
        )


        // prepare secret state 'shortfallCharges_billNumber' for commitment

        field shortfallCharges_billNumber_newCommitment_value_field = shortfallCharges_billNumber

        // shortfallCharges_billNumber_newCommitment_commitment - preimage check

        field shortfallCharges_billNumber_newCommitment_commitment_check_field = poseidon([\
          shortfallCharges_billNumber_stateVarId_field,\
          shortfallCharges_billNumber_newCommitment_value_field,\
          shortfallCharges_billNumber_newCommitment_owner_publicKey,\
          shortfallCharges_billNumber_newCommitment_salt\
        ])

        assert(\
          field_to_bool_256(shortfallCharges_billNumber_newCommitment_commitment)[8..256] == field_to_bool_256(shortfallCharges_billNumber_newCommitment_commitment_check_field)[8..256]\
        )


        // numberOfConsecutivePeriodsForSurplus_oldCommitment - PoKoSK:
        // The correctness of this secret key will be constrained within the oldCommitment existence check.

        field[2] numberOfConsecutivePeriodsForSurplus_oldCommitment_owner_publicKey_point = scalarMult(field_to_bool_256(numberOfConsecutivePeriodsForSurplus_oldCommitment_owner_secretKey), [curveParams().Gu, curveParams().Gv], curveParams())

        bool numberOfConsecutivePeriodsForSurplus_oldCommitment_owner_publicKey_sign = edwardsCompress(numberOfConsecutivePeriodsForSurplus_oldCommitment_owner_publicKey_point)[0]

        bool[254] numberOfConsecutivePeriodsForSurplus_oldCommitment_yBits = field_to_bool_256(numberOfConsecutivePeriodsForSurplus_oldCommitment_owner_publicKey_point[1])[2..256]
        numberOfConsecutivePeriodsForSurplus_oldCommitment_yBits[0] = numberOfConsecutivePeriodsForSurplus_oldCommitment_owner_publicKey_sign

        field numberOfConsecutivePeriodsForSurplus_oldCommitment_owner_publicKey = bool_256_to_field([false, false, ...numberOfConsecutivePeriodsForSurplus_oldCommitment_yBits])


        // Nullify numberOfConsecutivePeriodsForShortfall:

        field numberOfConsecutivePeriodsForSurplus_oldCommitment_nullifier_check_field = poseidon([\
          numberOfConsecutivePeriodsForSurplus_stateVarId_field,\
          numberOfConsecutivePeriodsForSurplus_oldCommitment_owner_secretKey,\
          numberOfConsecutivePeriodsForSurplus_oldCommitment_salt\
        ])

        assert(\
        field_to_bool_256(numberOfConsecutivePeriodsForSurplus_oldCommitment_nullifier)[8..256] == field_to_bool_256(numberOfConsecutivePeriodsForSurplus_oldCommitment_nullifier_check_field)[8..256]\
        )
        


        // numberOfConsecutivePeriodsForSurplus_oldCommitment_commitment: preimage check


        field numberOfConsecutivePeriodsForSurplus_oldCommitment_commitment_field = poseidon([\
          numberOfConsecutivePeriodsForSurplus_stateVarId_field,\
          numberOfConsecutivePeriodsForSurplus_oldCommitment_value,\
          numberOfConsecutivePeriodsForSurplus_oldCommitment_owner_publicKey,\
          numberOfConsecutivePeriodsForSurplus_oldCommitment_salt        ])


        // numberOfConsecutivePeriodsForSurplus_oldCommitment_commitment: existence check


        field numberOfConsecutivePeriodsForSurplus_commitmentRoot_check = checkRoot(\
          numberOfConsecutivePeriodsForSurplus_oldCommitment_membershipWitness_siblingPath,\
          numberOfConsecutivePeriodsForSurplus_oldCommitment_commitment_field,\
          numberOfConsecutivePeriodsForSurplus_oldCommitment_membershipWitness_index\
        )


        assert(\
          field_to_bool_256(commitmentRoot)[8..256] == field_to_bool_256(numberOfConsecutivePeriodsForSurplus_commitmentRoot_check)[8..256]\
        )


        // surplusThreshold_oldCommitment - PoKoSK:
        // The correctness of this secret key will be constrained within the oldCommitment existence check.

        field[2] surplusThreshold_oldCommitment_owner_publicKey_point = scalarMult(field_to_bool_256(surplusThreshold_oldCommitment_owner_secretKey), [curveParams().Gu, curveParams().Gv], curveParams())

        bool surplusThreshold_oldCommitment_owner_publicKey_sign = edwardsCompress(surplusThreshold_oldCommitment_owner_publicKey_point)[0]

        bool[254] surplusThreshold_oldCommitment_yBits = field_to_bool_256(surplusThreshold_oldCommitment_owner_publicKey_point[1])[2..256]
        surplusThreshold_oldCommitment_yBits[0] = surplusThreshold_oldCommitment_owner_publicKey_sign

        field surplusThreshold_oldCommitment_owner_publicKey = bool_256_to_field([false, false, ...surplusThreshold_oldCommitment_yBits])


        // Nullify surplusThreshold:

        field surplusThreshold_oldCommitment_nullifier_check_field = poseidon([\
          surplusThreshold_stateVarId_field,\
          surplusThreshold_oldCommitment_owner_secretKey,\
          surplusThreshold_oldCommitment_salt\
        ])

        assert(\
        field_to_bool_256(surplusThreshold_oldCommitment_nullifier)[8..256] == field_to_bool_256(surplusThreshold_oldCommitment_nullifier_check_field)[8..256]\
        )
        
        


        // surplusThreshold_oldCommitment_commitment: preimage check


        field surplusThreshold_oldCommitment_commitment_field = poseidon([\
          surplusThreshold_stateVarId_field,\
          surplusThreshold_oldCommitment_value,\
          surplusThreshold_oldCommitment_owner_publicKey,\
          surplusThreshold_oldCommitment_salt        ])


        // surplusThreshold_oldCommitment_commitment: existence check


        field surplusThreshold_commitmentRoot_check = checkRoot(\
          surplusThreshold_oldCommitment_membershipWitness_siblingPath,\
          surplusThreshold_oldCommitment_commitment_field,\
          surplusThreshold_oldCommitment_membershipWitness_index\
        )


        assert(\
          field_to_bool_256(commitmentRoot)[8..256] == field_to_bool_256(surplusThreshold_commitmentRoot_check)[8..256]\
        )


        // surplusChargeSum_oldCommitment - PoKoSK:
        // The correctness of this secret key will be constrained within the oldCommitment existence check.

        field[2] surplusChargeSum_oldCommitment_owner_publicKey_point = scalarMult(field_to_bool_256(surplusChargeSum_oldCommitment_owner_secretKey), [curveParams().Gu, curveParams().Gv], curveParams())

        bool surplusChargeSum_oldCommitment_owner_publicKey_sign = edwardsCompress(surplusChargeSum_oldCommitment_owner_publicKey_point)[0]

        bool[254] surplusChargeSum_oldCommitment_yBits = field_to_bool_256(surplusChargeSum_oldCommitment_owner_publicKey_point[1])[2..256]
        surplusChargeSum_oldCommitment_yBits[0] = surplusChargeSum_oldCommitment_owner_publicKey_sign

        field surplusChargeSum_oldCommitment_owner_publicKey = bool_256_to_field([false, false, ...surplusChargeSum_oldCommitment_yBits])


        // Nullify surplusChargeSum:

        field surplusChargeSum_oldCommitment_nullifier_check_field = poseidon([\
          surplusChargeSum_stateVarId_field,\
          surplusChargeSum_oldCommitment_owner_secretKey,\
          surplusChargeSum_oldCommitment_salt\
        ])

        assert(\
        field_to_bool_256(surplusChargeSum_oldCommitment_nullifier)[8..256] == field_to_bool_256(surplusChargeSum_oldCommitment_nullifier_check_field)[8..256]\
        )
        

        // surplusChargeSum_oldCommitment_commitment: preimage check


        field surplusChargeSum_oldCommitment_commitment_field = poseidon([\
          surplusChargeSum_stateVarId_field,\
          surplusChargeSum_oldCommitment_value,\
          surplusChargeSum_oldCommitment_owner_publicKey,\
          surplusChargeSum_oldCommitment_salt        ])


        // surplusChargeSum_oldCommitment_commitment: existence check


        field surplusChargeSum_commitmentRoot_check = checkRoot(\
          surplusChargeSum_oldCommitment_membershipWitness_siblingPath,\
          surplusChargeSum_oldCommitment_commitment_field,\
          surplusChargeSum_oldCommitment_membershipWitness_index\
        )


        // Note: Don't bother actually asserting existence, if the oldCommitment is a dummy:
        surplusChargeSum_commitmentRoot_check = if surplusChargeSum_oldCommitment_isDummy == true then commitmentRoot else surplusChargeSum_commitmentRoot_check fi


        assert(\
          field_to_bool_256(commitmentRoot)[8..256] == field_to_bool_256(surplusChargeSum_commitmentRoot_check)[8..256]\
        )


        // prepare secret state 'surplusChargeSum' for commitment

        field surplusChargeSum_newCommitment_value_field = surplusChargeSum

        // surplusChargeSum_newCommitment_commitment - preimage check

        field surplusChargeSum_newCommitment_commitment_check_field = poseidon([\
          surplusChargeSum_stateVarId_field,\
          surplusChargeSum_newCommitment_value_field,\
          surplusChargeSum_newCommitment_owner_publicKey,\
          surplusChargeSum_newCommitment_salt\
        ])

        assert(\
          field_to_bool_256(surplusChargeSum_newCommitment_commitment)[8..256] == field_to_bool_256(surplusChargeSum_newCommitment_commitment_check_field)[8..256]\
        )


        // surplusIndex_oldCommitment - PoKoSK:
        // The correctness of this secret key will be constrained within the oldCommitment existence check.

        field[2] surplusIndex_oldCommitment_owner_publicKey_point = scalarMult(field_to_bool_256(surplusIndex_oldCommitment_owner_secretKey), [curveParams().Gu, curveParams().Gv], curveParams())

        bool surplusIndex_oldCommitment_owner_publicKey_sign = edwardsCompress(surplusIndex_oldCommitment_owner_publicKey_point)[0]

        bool[254] surplusIndex_oldCommitment_yBits = field_to_bool_256(surplusIndex_oldCommitment_owner_publicKey_point[1])[2..256]
        surplusIndex_oldCommitment_yBits[0] = surplusIndex_oldCommitment_owner_publicKey_sign

        field surplusIndex_oldCommitment_owner_publicKey = bool_256_to_field([false, false, ...surplusIndex_oldCommitment_yBits])


        // Nullify surplusIndex:

        field surplusIndex_oldCommitment_nullifier_check_field = poseidon([\
          surplusIndex_stateVarId_field,\
          surplusIndex_oldCommitment_owner_secretKey,\
          surplusIndex_oldCommitment_salt\
        ])

        assert(\
        field_to_bool_256(surplusIndex_oldCommitment_nullifier)[8..256] == field_to_bool_256(surplusIndex_oldCommitment_nullifier_check_field)[8..256]\
        )
        
        


        // surplusIndex_oldCommitment_commitment: preimage check


        field surplusIndex_oldCommitment_commitment_field = poseidon([\
          surplusIndex_stateVarId_field,\
          surplusIndex_oldCommitment_value,\
          surplusIndex_oldCommitment_owner_publicKey,\
          surplusIndex_oldCommitment_salt        ])


        // surplusIndex_oldCommitment_commitment: existence check


        field surplusIndex_commitmentRoot_check = checkRoot(\
          surplusIndex_oldCommitment_membershipWitness_siblingPath,\
          surplusIndex_oldCommitment_commitment_field,\
          surplusIndex_oldCommitment_membershipWitness_index\
        )


        // Note: Don't bother actually asserting existence, if the oldCommitment is a dummy:
        surplusIndex_commitmentRoot_check = if surplusIndex_oldCommitment_isDummy == true then commitmentRoot else surplusIndex_commitmentRoot_check fi


        assert(\
          field_to_bool_256(commitmentRoot)[8..256] == field_to_bool_256(surplusIndex_commitmentRoot_check)[8..256]\
        )


        // prepare secret state 'surplusIndex' for commitment

        field surplusIndex_newCommitment_value_field = surplusIndex

        // surplusIndex_newCommitment_commitment - preimage check

        field surplusIndex_newCommitment_commitment_check_field = poseidon([\
          surplusIndex_stateVarId_field,\
          surplusIndex_newCommitment_value_field,\
          surplusIndex_newCommitment_owner_publicKey,\
          surplusIndex_newCommitment_salt\
        ])

        assert(\
          field_to_bool_256(surplusIndex_newCommitment_commitment)[8..256] == field_to_bool_256(surplusIndex_newCommitment_commitment_check_field)[8..256]\
        )


        field surplusCharges_billNumber_stateVarId_field = mimc2([surplusCharges_mappingId, billNumber])


        // surplusCharges_billNumber_oldCommitment - PoKoSK:
        // The correctness of this secret key will be constrained within the oldCommitment existence check.

        field[2] surplusCharges_billNumber_oldCommitment_owner_publicKey_point = scalarMult(field_to_bool_256(surplusCharges_billNumber_oldCommitment_owner_secretKey), [curveParams().Gu, curveParams().Gv], curveParams())

        bool surplusCharges_billNumber_oldCommitment_owner_publicKey_sign = edwardsCompress(surplusCharges_billNumber_oldCommitment_owner_publicKey_point)[0]

        bool[254] surplusCharges_billNumber_oldCommitment_yBits = field_to_bool_256(surplusCharges_billNumber_oldCommitment_owner_publicKey_point[1])[2..256]
        surplusCharges_billNumber_oldCommitment_yBits[0] = surplusCharges_billNumber_oldCommitment_owner_publicKey_sign

        field surplusCharges_billNumber_oldCommitment_owner_publicKey = bool_256_to_field([false, false, ...surplusCharges_billNumber_oldCommitment_yBits])


        // Nullify surplusCharges_billNumber:

        field surplusCharges_billNumber_oldCommitment_nullifier_check_field = poseidon([\
          surplusCharges_billNumber_stateVarId_field,\
          surplusCharges_billNumber_oldCommitment_owner_secretKey,\
          surplusCharges_billNumber_oldCommitment_salt\
        ])

        assert(\
        field_to_bool_256(surplusCharges_billNumber_oldCommitment_nullifier)[8..256] == field_to_bool_256(surplusCharges_billNumber_oldCommitment_nullifier_check_field)[8..256]\
        )
        


        // surplusCharges_billNumber_oldCommitment_commitment: preimage check


        field surplusCharges_billNumber_oldCommitment_commitment_field = poseidon([\
          surplusCharges_billNumber_stateVarId_field,\
          surplusCharges_billNumber_oldCommitment_value,\
          surplusCharges_billNumber_oldCommitment_owner_publicKey,\
          surplusCharges_billNumber_oldCommitment_salt        ])


        // surplusCharges_billNumber_oldCommitment_commitment: existence check


        field surplusCharges_billNumber_commitmentRoot_check = checkRoot(\
          surplusCharges_billNumber_oldCommitment_membershipWitness_siblingPath,\
          surplusCharges_billNumber_oldCommitment_commitment_field,\
          surplusCharges_billNumber_oldCommitment_membershipWitness_index\
        )


        // Note: Don't bother actually asserting existence, if the oldCommitment is a dummy:
        surplusCharges_billNumber_commitmentRoot_check = if surplusCharges_billNumber_oldCommitment_isDummy == true then commitmentRoot else surplusCharges_billNumber_commitmentRoot_check fi


        assert(\
          field_to_bool_256(commitmentRoot)[8..256] == field_to_bool_256(surplusCharges_billNumber_commitmentRoot_check)[8..256]\
        )


        // prepare secret state 'surplusCharges_billNumber' for commitment

        field surplusCharges_billNumber_newCommitment_value_field = surplusCharges_billNumber

        // surplusCharges_billNumber_newCommitment_commitment - preimage check

        field surplusCharges_billNumber_newCommitment_commitment_check_field = poseidon([\
          surplusCharges_billNumber_stateVarId_field,\
          surplusCharges_billNumber_newCommitment_value_field,\
          surplusCharges_billNumber_newCommitment_owner_publicKey,\
          surplusCharges_billNumber_newCommitment_salt\
        ])

        assert(\
          field_to_bool_256(surplusCharges_billNumber_newCommitment_commitment)[8..256] == field_to_bool_256(surplusCharges_billNumber_newCommitment_commitment_check_field)[8..256]\
        )

         return generatorCharges_billNumber_newCommitment_commitment,offtakerCharges_billNumber_newCommitment_commitment,generatorInterest_billNumber_newCommitment_commitment,offtakerInterest_billNumber_newCommitment_commitment,shortfallCharges_billNumber_newCommitment_commitment,surplusCharges_billNumber_newCommitment_commitment,negativePriceCharges_billNumber_newCommitment_commitment