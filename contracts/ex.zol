// SPDX-License-Identifier: MIT
pragma solidity ^0.8.21;

interface IERC20 {
    function totalSupply() external view returns (uint);
    function balanceOf(address account) external view returns (uint);

    function transfer(address recipient, uint amount) external returns (bool);

    function allowance(
        address owner,
        address spender
    ) external view returns (uint);

    function approve(address spender, uint amount) external returns (bool);

    function transferFrom(
        address sender,
        address recipient,
        uint amount
    ) external returns (bool);

    event Transfer(address indexed from, address indexed to, uint amount);
    event Approval(address indexed owner, address indexed spender, uint amount);
}

contract ZKSender {
    IERC20 public immutable token;

    uint public reserve;

    constructor(address _token) {
        token = IERC20(_token);
    }

    // This function hides the tokens and makes them only accessible via ZKP
    function vault() {}

    // This function UNhides the tokens and makes them transparently accissable
    function unvault() {}

    // This function sends the funds within the ZKP
    function sendTo() {}
}
